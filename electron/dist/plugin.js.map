{"version":3,"file":"plugin.js","sources":["../build/electron/src/GlobalSQLite.js","../build/electron/src/electron-utils/utilsDelete.js","../build/electron/src/electron-utils/utilsFile.js","../build/electron/src/electron-utils/utilsSqlstatement.js","../build/electron/src/electron-utils/utilsSQLite.js","../build/electron/src/electron-utils/ImportExportJson/utilsJson.js","../build/electron/src/electron-utils/ImportExportJson/exportToJson.js","../build/electron/src/electron-utils/utilsDrop.js","../build/electron/src/electron-utils/ImportExportJson/importFromJson.js","../build/electron/src/electron-utils/utilsSecret.js","../build/electron/src/electron-utils/ImportExportJson/utilsJsonEncryption.js","../build/electron/src/electron-utils/utilsEncryption.js","../build/electron/src/electron-utils/utilsUpgrade.js","../build/electron/src/electron-utils/Database.js","../build/electron/src/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GlobalSQLite = void 0;\r\nclass GlobalSQLite {\r\n    constructor() {\r\n        this.secret = 'sqlite secret';\r\n        this.newsecret = 'sqlite new secret';\r\n    }\r\n}\r\nexports.GlobalSQLite = GlobalSQLite;\r\n//# sourceMappingURL=GlobalSQLite.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsDelete = void 0;\r\nclass UtilsDeleteError {\r\n    constructor(message) {\r\n        this.message = message;\r\n    }\r\n    static upDateWhereForDefault(message) {\r\n        return new UtilsDeleteError(message);\r\n    }\r\n    static upDateWhereForRestrict(message) {\r\n        return new UtilsDeleteError(message);\r\n    }\r\n    static upDateWhereForCascade(message) {\r\n        return new UtilsDeleteError(message);\r\n    }\r\n    static executeUpdateForDelete(message) {\r\n        return new UtilsDeleteError(message);\r\n    }\r\n}\r\nclass UtilsDelete {\r\n    getReferencedTableName(refValue) {\r\n        let tableName = '';\r\n        if (refValue.length > 0) {\r\n            const arr = refValue.split(new RegExp('REFERENCES', 'i'));\r\n            if (arr.length === 2) {\r\n                const oPar = arr[1].indexOf(\"(\");\r\n                tableName = arr[1].substring(0, oPar).trim();\r\n            }\r\n        }\r\n        return tableName;\r\n    }\r\n    upDateWhereForDefault(withRefsNames, results) {\r\n        let setStmt = '';\r\n        let uWhereStmt = '';\r\n        try {\r\n            const key = results.key;\r\n            const cols = [];\r\n            for (const relItem of results.relatedItems) {\r\n                const mVal = relItem[key];\r\n                if (mVal !== undefined) {\r\n                    cols.push(mVal);\r\n                }\r\n            }\r\n            // Create the set statement\r\n            for (const name of withRefsNames) {\r\n                setStmt += `${name} = NULL, `;\r\n            }\r\n            setStmt += 'sql_deleted = 0';\r\n            // Create the where statement\r\n            uWhereStmt = `WHERE ${key} IN (`;\r\n            for (const col of cols) {\r\n                uWhereStmt += `${col},`;\r\n            }\r\n            if (uWhereStmt.endsWith(',')) {\r\n                uWhereStmt = uWhereStmt.slice(0, -1);\r\n            }\r\n            uWhereStmt += ');';\r\n        }\r\n        catch (error) {\r\n            const msg = error.message ? error.message : error;\r\n            throw UtilsDeleteError.upDateWhereForDefault(msg);\r\n        }\r\n        return { setStmt, uWhereStmt };\r\n    }\r\n    upDateWhereForRestrict(results) {\r\n        try {\r\n            const setStmt = '';\r\n            const uWhereStmt = '';\r\n            if (results.relatedItems.length > 0) {\r\n                const msg = 'Restrict mode related items exist, please delete them first';\r\n                throw UtilsDeleteError.upDateWhereForRestrict(msg);\r\n            }\r\n            return { setStmt, uWhereStmt };\r\n        }\r\n        catch (error) {\r\n            const msg = error.message ? error.message : error;\r\n            throw UtilsDeleteError.upDateWhereForRestrict(msg);\r\n        }\r\n    }\r\n    upDateWhereForCascade(results) {\r\n        let setStmt = '';\r\n        let uWhereStmt = '';\r\n        try {\r\n            const key = results.key;\r\n            const cols = [];\r\n            for (const relItem of results.relatedItems) {\r\n                const mVal = relItem[key];\r\n                if (mVal !== undefined) {\r\n                    cols.push(mVal);\r\n                }\r\n            }\r\n            setStmt += 'sql_deleted = 1';\r\n            // Create the where statement\r\n            uWhereStmt = `WHERE ${key} IN (`;\r\n            for (const col of cols) {\r\n                uWhereStmt += `${col},`;\r\n            }\r\n            if (uWhereStmt.endsWith(',')) {\r\n                uWhereStmt = uWhereStmt.slice(0, -1);\r\n            }\r\n            uWhereStmt += ');';\r\n        }\r\n        catch (error) {\r\n            const msg = error.message ? error.message : error;\r\n            throw UtilsDeleteError.upDateWhereForCascade(msg);\r\n        }\r\n        return { setStmt, uWhereStmt };\r\n    }\r\n    getCurrentTimeAsInteger() {\r\n        const currentTime = Math.floor(Date.now() / 1000);\r\n        return currentTime;\r\n    }\r\n    checkValuesMatch(array1, array2) {\r\n        for (const value of array1) {\r\n            if (!array2.includes(value)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.UtilsDelete = UtilsDelete;\r\n//# sourceMappingURL=utilsDelete.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsFile = void 0;\r\nconst promises_1 = require(\"node:fs/promises\");\r\nclass UtilsFile {\r\n    constructor() {\r\n        this.pathDB = 'Databases';\r\n        this.Path = null;\r\n        this.NodeFs = null;\r\n        this.NodeFetch = null;\r\n        this.JSZip = null;\r\n        this.Os = null;\r\n        this.Electron = null;\r\n        this.AppName = '';\r\n        this.HomeDir = '';\r\n        this.sep = '/';\r\n        this.isEncryption = false;\r\n        this.Path = require('path');\r\n        this.NodeFs = require('fs');\r\n        this.NodeFetch = require('node-fetch');\r\n        this.Os = require('os');\r\n        this.JSZip = require('jszip');\r\n        this.Electron = require('electron');\r\n        this.HomeDir = this.Os.homedir();\r\n        const dir = __dirname;\r\n        const idx = dir.indexOf('\\\\');\r\n        if (idx != -1)\r\n            this.sep = '\\\\';\r\n        this.appPath = this.Electron.app.getAppPath();\r\n        const rawdata = this.NodeFs.readFileSync(this.Path.resolve(this.appPath, 'package.json'));\r\n        this.AppName = JSON.parse(rawdata).name;\r\n        const pathToBuild = this.Path.join(this.appPath, 'build');\r\n        if (this.NodeFs.existsSync(this.Path.join(pathToBuild, 'capacitor.config.js'))) {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            this.capConfig = require(this.Path.join(pathToBuild, 'capacitor.config.js')).default;\r\n        }\r\n        else {\r\n            this.capConfig = JSON.parse(this.NodeFs.readFileSync(this.Path.join(this.appPath, 'capacitor.config.json')).toString());\r\n        }\r\n        this.isEncryption = this.capConfig.plugins.CapacitorSQLite\r\n            .electronIsEncryption\r\n            ? this.capConfig.plugins.CapacitorSQLite.electronIsEncryption\r\n            : false;\r\n        this.osType = this.Os.type();\r\n        switch (this.osType) {\r\n            case 'Darwin':\r\n                this.pathDB = this.capConfig.plugins.CapacitorSQLite.electronMacLocation\r\n                    ? this.capConfig.plugins.CapacitorSQLite.electronMacLocation\r\n                    : 'Databases';\r\n                break;\r\n            case 'Linux':\r\n                this.pathDB = this.capConfig.plugins.CapacitorSQLite\r\n                    .electronLinuxLocation\r\n                    ? this.capConfig.plugins.CapacitorSQLite.electronLinuxLocation\r\n                    : 'Databases';\r\n                break;\r\n            case 'Windows_NT':\r\n                this.pathDB = this.capConfig.plugins.CapacitorSQLite\r\n                    .electronWindowsLocation\r\n                    ? this.capConfig.plugins.CapacitorSQLite.electronWindowsLocation\r\n                    : 'Databases';\r\n                break;\r\n            default:\r\n                console.log('other operating system');\r\n        }\r\n    }\r\n    /**\r\n     * Get isEncryption from config\r\n     * @returns\r\n     */\r\n    getIsEncryption() {\r\n        return this.isEncryption;\r\n    }\r\n    /**\r\n     * GetExtName\r\n     * @param filePath\r\n     * @returns\r\n     */\r\n    getExtName(filePath) {\r\n        return this.Path.extname(filePath);\r\n    }\r\n    getBaseName(filePath) {\r\n        return this.Path.basename(filePath, this.Path.extname(filePath));\r\n    }\r\n    /**\r\n     * IsPathExists\r\n     * @param filePath\r\n     */\r\n    isPathExists(filePath) {\r\n        let ret = false;\r\n        try {\r\n            if (this.NodeFs.existsSync(filePath)) {\r\n                ret = true;\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.error('Error isFileExist: ' + err);\r\n            ret = false;\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * IsFileExists\r\n     * @param fileName\r\n     */\r\n    isFileExists(fileName) {\r\n        let ret = false;\r\n        const filePath = this.getFilePath(fileName);\r\n        if (filePath.length > 0) {\r\n            ret = this.isPathExists(filePath);\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * GetFilePath\r\n     * get the file path\r\n     * @param fileName\r\n     */\r\n    getFilePath(fileName) {\r\n        return this.Path.join(this.getDatabasesPath(), fileName);\r\n    }\r\n    /**\r\n     * GetDatabasesPath\r\n     * get the database folder path\r\n     */\r\n    getDatabasesPath() {\r\n        let retPath = '';\r\n        const sep = this.Path.sep;\r\n        const dbFolder = this.pathDB;\r\n        if (dbFolder.includes(sep)) {\r\n            retPath = dbFolder;\r\n            if (this.Path.basename(dbFolder) !== this.AppName) {\r\n                retPath = this.Path.join(dbFolder, this.AppName);\r\n            }\r\n        }\r\n        else {\r\n            retPath = this.Path.join(this.HomeDir, dbFolder, this.AppName);\r\n        }\r\n        const retB = this._createFolderIfNotExists(retPath);\r\n        if (!retB)\r\n            retPath = '';\r\n        return retPath;\r\n    }\r\n    /**\r\n     * GetCachePath\r\n     * get the database cache folder path\r\n     */\r\n    getCachePath() {\r\n        let retPath = '';\r\n        const databasePath = this.getDatabasesPath();\r\n        retPath = this.Path.join(databasePath, 'cache');\r\n        const retB = this._createFolderIfNotExists(retPath);\r\n        if (!retB)\r\n            retPath = '';\r\n        return retPath;\r\n    }\r\n    /**\r\n     * GetAssetsDatabasesPath\r\n     * get the assets databases folder path\r\n     */\r\n    getAssetsDatabasesPath() {\r\n        let retPath = '';\r\n        const webDir = this.capConfig.webDir;\r\n        const dir = webDir === 'www' ? 'src' : 'public';\r\n        let mAppPath = this.appPath;\r\n        if (this.Path.basename(this.appPath) === 'electron') {\r\n            mAppPath = this.Path.dirname(this.appPath);\r\n        }\r\n        retPath = this.Path.resolve(mAppPath, dir, 'assets', 'databases');\r\n        return retPath;\r\n    }\r\n    /**\r\n     * SetPathSuffix\r\n     * @param db\r\n     */\r\n    setPathSuffix(db) {\r\n        let toDb = db;\r\n        const ext = '.db';\r\n        const dirName = this.Path.dirname(db);\r\n        const baseName = this.getBaseName(db);\r\n        if (this.getExtName(db) === ext) {\r\n            if (!baseName.includes('SQLite')) {\r\n                const dbName = `${baseName}SQLite`;\r\n                toDb = `${this.Path.join(dirName, dbName)}${ext}`;\r\n            }\r\n        }\r\n        return toDb;\r\n    }\r\n    /**\r\n     * GetFileList\r\n     * get the file list for a given folder\r\n     * @param path\r\n     */\r\n    async getFileList(path) {\r\n        const filenames = this.NodeFs.readdirSync(path);\r\n        const dbs = [];\r\n        filenames.forEach((file) => {\r\n            if (this.getExtName(file) == '.db' || this.getExtName(file) == '.zip')\r\n                dbs.push(file);\r\n        });\r\n        return Promise.resolve(dbs);\r\n    }\r\n    /**\r\n     * CopyFromAssetToDatabase\r\n     * @param db\r\n     * @param overwrite\r\n     */\r\n    async copyFromAssetToDatabase(db, overwrite) {\r\n        const pAsset = this.Path.join(this.getAssetsDatabasesPath(), db);\r\n        const toDb = this.setPathSuffix(db);\r\n        const pDb = this.Path.join(this.getDatabasesPath(), toDb);\r\n        await this.copyFilePath(pAsset, pDb, overwrite);\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * unzipDatabase\r\n     * @param db\r\n     * @param overwrite\r\n     */\r\n    async unzipDatabase(db, fPath, overwrite) {\r\n        const pZip = this.Path.join(fPath, db);\r\n        // Read the Zip file\r\n        this.NodeFs.readFile(pZip, (err, data) => {\r\n            if (err) {\r\n                console.log(err);\r\n                return Promise.reject(`unzipDatabase ${JSON.stringify(err)}`);\r\n            }\r\n            const zip = new this.JSZip();\r\n            zip.loadAsync(data).then((contents) => {\r\n                Object.keys(contents.files).forEach(filename => {\r\n                    zip\r\n                        .file(filename)\r\n                        .async('nodebuffer')\r\n                        .then(async (content) => {\r\n                        const toDb = this.setPathSuffix(filename);\r\n                        const pDb = this.Path.join(this.getDatabasesPath(), toDb);\r\n                        // check filePath exists\r\n                        const isPath = this.isPathExists(pDb);\r\n                        if (!isPath || overwrite) {\r\n                            if (overwrite && isPath) {\r\n                                await this.deleteFilePath(pDb);\r\n                            }\r\n                            this.NodeFs.writeFileSync(pDb, content);\r\n                        }\r\n                        return Promise.resolve();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * CopyFileName\r\n     * Copy file name\r\n     * @param fileName\r\n     * @param toFileName\r\n     */\r\n    async copyFileName(fileName, toFileName) {\r\n        // get File Paths\r\n        const filePath = this.getFilePath(fileName);\r\n        const toFilePath = this.getFilePath(toFileName);\r\n        if (filePath.length !== 0 && toFilePath.length !== 0) {\r\n            try {\r\n                await this.copyFilePath(filePath, toFilePath, true);\r\n                return Promise.resolve();\r\n            }\r\n            catch (err) {\r\n                return Promise.reject(`CopyFileName: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            return Promise.reject('CopyFileName: cannot get the ' + 'filePath');\r\n        }\r\n    }\r\n    /**\r\n     * CopyFilePath\r\n     * Copy file Path\r\n     * @param filePath\r\n     * @param toFilePath\r\n     */\r\n    async copyFilePath(filePath, toFilePath, overwrite) {\r\n        if (filePath.length !== 0 && toFilePath.length !== 0) {\r\n            // check filePath exists\r\n            const isPath = this.isPathExists(toFilePath);\r\n            if (!isPath || overwrite) {\r\n                try {\r\n                    if (overwrite && isPath) {\r\n                        await this.deleteFilePath(toFilePath);\r\n                    }\r\n                    this.NodeFs.copyFileSync(filePath, toFilePath);\r\n                }\r\n                catch (err) {\r\n                    return Promise.reject(`CopyFilePath: ${err}`);\r\n                }\r\n            }\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            return Promise.reject('CopyFilePath: cannot get the ' + 'filePath');\r\n        }\r\n    }\r\n    async copyFile(fromPath, fromFile, toPath, toFile) {\r\n        const fPath = this.Path.join(fromPath, fromFile);\r\n        const tPath = this.Path.join(toPath, toFile);\r\n        try {\r\n            this.NodeFs.copyFileSync(fPath, tPath);\r\n            return Promise.resolve();\r\n        }\r\n        catch (err) {\r\n            return Promise.reject(`CopyFile: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * DeleteFileName\r\n     * Delete a file by its name\r\n     * @param fileName\r\n     */\r\n    async deleteFileName(fileName) {\r\n        // get file path\r\n        const filePath = this.getFilePath(fileName);\r\n        if (filePath.length !== 0) {\r\n            try {\r\n                await this.deleteFilePath(filePath);\r\n                return Promise.resolve();\r\n            }\r\n            catch (err) {\r\n                return Promise.reject('DeleteFileName: delete filePath ' + `failed ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            return Promise.reject('DeleteFileName: get filePath ' + 'failed');\r\n        }\r\n    }\r\n    /**\r\n     * DeleteFilePath\r\n     * Delete a file by its path\r\n     * @param filePath\r\n     */\r\n    async deleteFilePath(filePath) {\r\n        let unlinkRetries = 50000;\r\n        /**\r\n         * On windows, the file lock behaves unpredictable. Often it claims a databsae file is locked / busy, although\r\n         * the file stream is already closed.\r\n         * Even though we already checked the status with the `waitForFilePathLock()` method previously.\r\n         *\r\n         * The only way to handle this reliably is to retry deletion until it works.\r\n         */\r\n        const deleteFile = async () => {\r\n            try {\r\n                await promises_1.unlink(filePath);\r\n            }\r\n            catch (err) {\r\n                unlinkRetries--;\r\n                if (unlinkRetries > 0) {\r\n                    await deleteFile();\r\n                }\r\n                else {\r\n                    throw err;\r\n                }\r\n            }\r\n        };\r\n        if (filePath.length !== 0) {\r\n            // check if path exists\r\n            const isPath = this.isPathExists(filePath);\r\n            if (isPath) {\r\n                try {\r\n                    await this.waitForFilePathLock(filePath);\r\n                    // actually delete the file\r\n                    await deleteFile();\r\n                    return Promise.resolve();\r\n                }\r\n                catch (err) {\r\n                    return Promise.reject(`DeleteFilePath: ${err}`);\r\n                }\r\n            }\r\n            else {\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n        else {\r\n            return Promise.reject('DeleteFilePath: delete filePath' + 'failed');\r\n        }\r\n    }\r\n    async waitForFilePathLock(filePath, timeoutMS = 4000) {\r\n        let timeIsOver = false;\r\n        setTimeout(() => {\r\n            timeIsOver = true;\r\n        }, timeoutMS);\r\n        return new Promise((resolve, reject) => {\r\n            const check = async () => {\r\n                if (timeIsOver) {\r\n                    reject(new Error(`WaitForFilePathLock: The resource is still locked / busy after ${timeoutMS} milliseconds.`));\r\n                    return;\r\n                }\r\n                // check if path exists\r\n                const isPath = this.isPathExists(filePath);\r\n                // The file path does not exist. A non existant path cannot be locked.\r\n                if (!isPath) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n                try {\r\n                    const stream = await promises_1.open(filePath, 'r+');\r\n                    // We need to close the stream afterwards, because otherwise, we're locking the file\r\n                    await stream.close();\r\n                    resolve();\r\n                }\r\n                catch (err) {\r\n                    if (err.code === 'EBUSY') {\r\n                        // The resource is busy. Retry in 100ms\r\n                        setTimeout(() => {\r\n                            check();\r\n                        }, 100);\r\n                        return;\r\n                    }\r\n                    else if (err.code === 'ENOENT') {\r\n                        // The file does not exist (anymore). So it cannot be locked.\r\n                        resolve();\r\n                        return;\r\n                    }\r\n                    else {\r\n                        // Something else went wrong.\r\n                        reject(new Error(`WaitForFilePathLock: Error while checking the file: ${err}`));\r\n                    }\r\n                }\r\n            };\r\n            check();\r\n        });\r\n    }\r\n    /**\r\n     * RenameFileName\r\n     * @param fileName\r\n     * @param toFileName\r\n     */\r\n    async renameFileName(fileName, toFileName) {\r\n        // get File Paths\r\n        const filePath = this.getFilePath(fileName);\r\n        const toFilePath = this.getFilePath(toFileName);\r\n        if (filePath.length !== 0 && toFilePath.length !== 0) {\r\n            try {\r\n                await this.renameFilePath(filePath, toFilePath);\r\n                return Promise.resolve();\r\n            }\r\n            catch (err) {\r\n                return Promise.reject(`RenameFileName: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            return Promise.reject('RenameFileName: filePaths do not ' + 'exist');\r\n        }\r\n    }\r\n    /**\r\n     * RenameFilePath\r\n     * @param filePath\r\n     * @param toFilePath\r\n     */\r\n    async renameFilePath(filePath, toFilePath) {\r\n        if (filePath.length !== 0 && toFilePath.length !== 0) {\r\n            // check filePath exists\r\n            const isPath = this.isPathExists(filePath);\r\n            if (isPath) {\r\n                // delete toFilePath if exists\r\n                try {\r\n                    await this.deleteFilePath(toFilePath);\r\n                    this.NodeFs.renameSync(filePath, toFilePath);\r\n                    return Promise.resolve();\r\n                }\r\n                catch (err) {\r\n                    return Promise.reject('RenameFilePath: ' + `${err}`);\r\n                }\r\n            }\r\n            else {\r\n                return Promise.reject(`RenameFilePath: ${filePath} does not exist`);\r\n            }\r\n        }\r\n        else {\r\n            return Promise.reject('RenameFilePath: filePath not found');\r\n        }\r\n    }\r\n    async moveDatabaseFromCache() {\r\n        const cachePath = this.getCachePath();\r\n        const databasePath = this.getDatabasesPath();\r\n        const dbCacheList = await this.getFileList(cachePath);\r\n        for (const name of dbCacheList) {\r\n            const ext = this.getExtName(name);\r\n            const fromDBName = this.Path.join(cachePath, name);\r\n            if (ext === '.db') {\r\n                const pDb = this.setPathSuffix(this.Path.join(databasePath, name));\r\n                try {\r\n                    await this.renameFilePath(fromDBName, pDb);\r\n                }\r\n                catch (err) {\r\n                    return Promise.reject('moveDatabaseFromCache: ' + `${err}`);\r\n                }\r\n            }\r\n            if (ext === '.zip') {\r\n                try {\r\n                    await this.deleteFilePath(fromDBName);\r\n                }\r\n                catch (err) {\r\n                    return Promise.reject('moveDatabaseFromCache: ' + `${err}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * RestoreFileName\r\n     * @param fileName\r\n     * @param prefix\r\n     */\r\n    async restoreFileName(fileName, prefix) {\r\n        const mFileName = `${prefix}-${fileName}`;\r\n        // check if file exists\r\n        const isFilePre = this.isFileExists(mFileName);\r\n        if (isFilePre) {\r\n            const isFile = this.isFileExists(fileName);\r\n            if (isFile) {\r\n                try {\r\n                    await this.deleteFileName(fileName);\r\n                    await this.renameFileName(mFileName, fileName);\r\n                    return Promise.resolve();\r\n                }\r\n                catch (err) {\r\n                    return Promise.reject('RestoreFileName: ' + `${err}`);\r\n                }\r\n            }\r\n            else {\r\n                return Promise.reject(`RestoreFileName: ${fileName} ` + 'does not exist');\r\n            }\r\n        }\r\n        else {\r\n            return Promise.reject(`RestoreFileName: ${mFileName} ` + 'does not exist');\r\n        }\r\n    }\r\n    /**\r\n     * DownloadFileFromHTTP\r\n     * @param url\r\n     * @param path\r\n     */\r\n    async downloadFileFromHTTP(url, pathFolder) {\r\n        const res = await this.NodeFetch(url);\r\n        const ext = this.getExtName(url);\r\n        const dbName = this.getBaseName(url);\r\n        const filePath = `${this.Path.join(pathFolder, dbName)}${ext}`;\r\n        const fileStream = this.NodeFs.createWriteStream(filePath);\r\n        await new Promise((resolve, reject) => {\r\n            res.body.pipe(fileStream);\r\n            res.body.on('error', reject);\r\n            fileStream.on('finish', resolve);\r\n        });\r\n    }\r\n    readFileAsPromise(path, options) {\r\n        return new Promise((resolve, reject) => {\r\n            const fileStream = this.NodeFs.createReadStream(path, options);\r\n            const chunks = [];\r\n            fileStream.on('data', (data) => {\r\n                chunks.push(data);\r\n            });\r\n            fileStream.on('close', () => {\r\n                resolve(chunks.toString());\r\n            });\r\n            fileStream.on('error', (err) => {\r\n                const msg = err.message ? err.message : err;\r\n                reject(msg);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * CreateFolderIfNotExists\r\n     * Create directory\r\n     * @param folder\r\n     */\r\n    _createFolderIfNotExists(folder) {\r\n        let ret;\r\n        try {\r\n            if (!this.NodeFs.existsSync(folder)) {\r\n                this._mkdirSyncRecursive(folder);\r\n            }\r\n            ret = true;\r\n        }\r\n        catch (e) {\r\n            console.log('Error: in getDBPath', e);\r\n            ret = false;\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * MkdirSyncRecursive\r\n     * Create directories recursively\r\n     * @param directory\r\n     */\r\n    _mkdirSyncRecursive(directory) {\r\n        const sep = this.Path.sep;\r\n        const path = directory.replace(/\\/$/, '').split(sep);\r\n        for (let i = 1; i <= path.length; i++) {\r\n            const segment = path.slice(0, i).join(sep);\r\n            segment.length > 0 && !this.NodeFs.existsSync(segment)\r\n                ? this.NodeFs.mkdirSync(segment)\r\n                : null;\r\n        }\r\n        return;\r\n    }\r\n}\r\nexports.UtilsFile = UtilsFile;\r\n//# sourceMappingURL=utilsFile.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsSQLStatement = void 0;\r\nclass UtilsSQLStatement {\r\n    constructor() {\r\n        this.replaceString = (originalStr, searchStr, replaceStr) => {\r\n            const range = originalStr.indexOf(searchStr);\r\n            if (range !== -1) {\r\n                const modifiedStr = originalStr.substring(0, range) + replaceStr + originalStr.substring(range + searchStr.length);\r\n                return modifiedStr;\r\n            }\r\n            return originalStr;\r\n        };\r\n    }\r\n    extractTableName(statement) {\r\n        const pattern = /(?:INSERT\\s+INTO|UPDATE|DELETE\\s+FROM)\\s+([^\\s]+)/i;\r\n        const match = statement.match(pattern);\r\n        if (match?.[1]) {\r\n            const tableName = match[1];\r\n            return tableName;\r\n        }\r\n        return null;\r\n    }\r\n    extractWhereClause(statement) {\r\n        const pattern = /WHERE(.+?)(?:ORDER\\s+BY|LIMIT|$)/i;\r\n        const match = statement.match(pattern);\r\n        if (match?.[1]) {\r\n            const whereClause = match[1].trim();\r\n            return whereClause;\r\n        }\r\n        return null;\r\n    }\r\n    addPrefixToWhereClause(whereClause, colNames, refNames, prefix) {\r\n        let columnValuePairs;\r\n        if (whereClause.includes(\"AND\")) {\r\n            // Split the WHERE clause based on the \"AND\" keyword\r\n            const subSequenceArray = whereClause.split(\"AND\");\r\n            console.log(\" whereClause\", whereClause);\r\n            console.log(\" subSequenceArray\", subSequenceArray);\r\n            columnValuePairs = subSequenceArray.map((pair) => pair.trim());\r\n        }\r\n        else {\r\n            columnValuePairs = [whereClause];\r\n        }\r\n        console.log(\" columnValuePairs\", columnValuePairs);\r\n        const modifiedPairs = columnValuePairs.map((pair) => {\r\n            const match = pair.match(/(\\w+)\\s*(=|IN|BETWEEN|LIKE)\\s*(.+)/);\r\n            if (!match) {\r\n                return pair;\r\n            }\r\n            const column = match[1].trim();\r\n            const operator = match[2].trim();\r\n            const value = match[3].trim();\r\n            let newColumn = column;\r\n            const index = this.findIndexOfStringInArray(column, refNames);\r\n            if (index !== -1) {\r\n                newColumn = this.getStringAtIndex(colNames, index);\r\n            }\r\n            const modifiedColumn = `${prefix}${newColumn}`;\r\n            const ret = `${modifiedColumn} ${operator} ${value}`;\r\n            return ret;\r\n        });\r\n        return modifiedPairs.join(\" AND \");\r\n    }\r\n    findIndexOfStringInArray(target, array) {\r\n        return array.indexOf(target);\r\n    }\r\n    getStringAtIndex(array, index) {\r\n        if (index >= 0 && index < array.length) {\r\n            return array[index];\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    extractForeignKeyInfo(sqlStatement) {\r\n        // Define the regular expression pattern for extracting the FOREIGN KEY clause\r\n        const foreignKeyPattern = /\\bFOREIGN\\s+KEY\\s*\\(([^)]+)\\)\\s+REFERENCES\\s+(\\w+)\\s*\\(([^)]+)\\)\\s+(ON\\s+DELETE\\s+(RESTRICT|CASCADE|SET\\s+NULL|SET\\s+DEFAULT|NO\\s+ACTION))?/;\r\n        const matches = sqlStatement.match(foreignKeyPattern);\r\n        if (matches) {\r\n            const foreignKeyInfo = {\r\n                forKeys: matches[1].split(\",\").map(key => key.trim()),\r\n                tableName: matches[2],\r\n                refKeys: matches[3].split(\",\").map(key => key.trim()),\r\n                action: matches[5] ? matches[5] : \"NO ACTION\"\r\n            };\r\n            return foreignKeyInfo;\r\n        }\r\n        else {\r\n            throw new Error(\"extractForeignKeyInfo: No FOREIGN KEY found\");\r\n        }\r\n    }\r\n    extractColumnNames(whereClause) {\r\n        const regex = /\\b(\\w+)\\s*(?=[=<>])|(?<=\\()\\s*(\\w+),\\s*(\\w+)\\s*(?=\\))|(?<=\\bIN\\s*\\(VALUES\\s*\\().*?(?=\\))|(?<=\\bIN\\s*\\().*?(?=\\))|(?<=\\bBETWEEN\\s*).*?(?=\\bAND\\b)|(?<=\\bLIKE\\s*')\\w+|\\bAND\\b/g;\r\n        const matches = whereClause.matchAll(regex);\r\n        const columnNames = [];\r\n        let andGroup = [];\r\n        for (const match of matches) {\r\n            if (match[0] === 'AND') {\r\n                columnNames.push(...andGroup);\r\n                andGroup = [];\r\n            }\r\n            else if (match[1]) {\r\n                andGroup.push(match[1]);\r\n            }\r\n            else if (match[2] && match[3]) {\r\n                andGroup.push(match[2]);\r\n                andGroup.push(match[3]);\r\n            }\r\n            else if (match[0]) {\r\n                const values = match[0]\r\n                    .replace(/[()']/g, '') // Remove parentheses and single quotes\r\n                    .split(',')\r\n                    .map(value => value.trim());\r\n                andGroup.push(...values);\r\n            }\r\n        }\r\n        columnNames.push(...andGroup);\r\n        return columnNames;\r\n    }\r\n    flattenMultilineString(input) {\r\n        const lines = input.split(/\\r?\\n/);\r\n        return lines.join(\" \");\r\n    }\r\n    getStmtAndRetColNames(sqlStmt, retMode) {\r\n        const retWord = \"RETURNING\";\r\n        const retStmtNames = { stmt: sqlStmt, names: \"\" };\r\n        const retWordIndex = sqlStmt.toUpperCase().indexOf(retWord);\r\n        if (retWordIndex !== -1) {\r\n            const prefix = sqlStmt.substring(0, retWordIndex);\r\n            retStmtNames.stmt = `${prefix};`;\r\n            if (retMode.substring(0, 2) === \"wA\") {\r\n                const suffix = sqlStmt.substring(retWordIndex + retWord.length);\r\n                const names = suffix.trim();\r\n                if (names.endsWith(\";\")) {\r\n                    retStmtNames.names = names.substring(0, names.length - 1);\r\n                }\r\n                else {\r\n                    retStmtNames.names = names;\r\n                }\r\n            }\r\n        }\r\n        return retStmtNames;\r\n    }\r\n    extractCombinedPrimaryKey(whereClause) {\r\n        const pattern = /WHERE\\s*\\((.+?)\\)\\s*(?:=|IN)\\s*\\((.+?)\\)/g;\r\n        const regex = new RegExp(pattern);\r\n        const matches = whereClause.matchAll(regex);\r\n        const primaryKeySets = [];\r\n        for (const match of matches) {\r\n            const keysString = match[1].trim();\r\n            const keys = keysString.split(\",\").map((key) => key.trim());\r\n            primaryKeySets.push(keys);\r\n        }\r\n        return primaryKeySets.length === 0 ? null : primaryKeySets;\r\n    }\r\n    getWhereStmtForCombinedPK(whStmt, withRefs, colNames, keys) {\r\n        let retWhere = whStmt;\r\n        for (const grpKeys of keys) {\r\n            const repKeys = grpKeys.join(\",\") === withRefs.join(\",\") ? colNames : withRefs;\r\n            for (const [index, key] of grpKeys.entries()) {\r\n                retWhere = this.replaceAllString(retWhere, key, repKeys[index]);\r\n            }\r\n        }\r\n        return retWhere;\r\n    }\r\n    replaceAllString(originalStr, searchStr, replaceStr) {\r\n        return originalStr.split(searchStr).join(replaceStr);\r\n    }\r\n    indicesOf(str, searchStr, fromIndex = 0) {\r\n        // Helper function to find indices of a substring within a string\r\n        const indices = [];\r\n        let currentIndex = str.indexOf(searchStr, fromIndex);\r\n        while (currentIndex !== -1) {\r\n            indices.push(currentIndex);\r\n            currentIndex = str.indexOf(searchStr, currentIndex + 1);\r\n        }\r\n        return indices;\r\n    }\r\n    getWhereStmtForNonCombinedPK(whStmt, withRefs, colNames) {\r\n        let whereStmt = \"\";\r\n        let stmt = whStmt.substring(6);\r\n        for (let idx = 0; idx < withRefs.length; idx++) {\r\n            let colType = \"withRefsNames\";\r\n            let idxs = this.indicesOf(stmt, withRefs[idx]);\r\n            if (idxs.length === 0) {\r\n                idxs = this.indicesOf(stmt, colNames[idx]);\r\n                colType = \"colNames\";\r\n            }\r\n            if (idxs.length > 0) {\r\n                let valStr = \"\";\r\n                const indicesEqual = this.indicesOf(stmt, \"=\", idxs[0]);\r\n                if (indicesEqual.length > 0) {\r\n                    const indicesAnd = this.indicesOf(stmt, \"AND\", indicesEqual[0]);\r\n                    if (indicesAnd.length > 0) {\r\n                        valStr = stmt.substring(indicesEqual[0] + 1, indicesAnd[0] - 1);\r\n                        stmt = stmt.substring(indicesAnd[0] + 3);\r\n                    }\r\n                    else {\r\n                        valStr = stmt.substring(indicesEqual[0] + 1);\r\n                    }\r\n                    if (idx > 0) {\r\n                        whereStmt += \" AND \";\r\n                    }\r\n                    if (colType === \"withRefsNames\") {\r\n                        whereStmt += colNames[idx] + \" = \" + valStr;\r\n                    }\r\n                    else {\r\n                        whereStmt += withRefs[idx] + \" = \" + valStr;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        whereStmt = \"WHERE \" + whereStmt;\r\n        return whereStmt;\r\n    }\r\n    updateWhere(whStmt, withRefs, colNames) {\r\n        let whereStmt = \"\";\r\n        if (whStmt.length <= 0) {\r\n            return whereStmt;\r\n        }\r\n        if (whStmt.toUpperCase().substring(0, 5) !== \"WHERE\") {\r\n            return whereStmt;\r\n        }\r\n        if (withRefs.length === colNames.length) {\r\n            // get whereStmt for primary combined key\r\n            const keys = this.extractCombinedPrimaryKey(whStmt);\r\n            if (keys) {\r\n                whereStmt = this.getWhereStmtForCombinedPK(whStmt, withRefs, colNames, keys);\r\n            }\r\n            else {\r\n                // get for non primary combined key\r\n                whereStmt = this.getWhereStmtForNonCombinedPK(whStmt, withRefs, colNames);\r\n            }\r\n        }\r\n        return whereStmt;\r\n    }\r\n}\r\nexports.UtilsSQLStatement = UtilsSQLStatement;\r\n//# sourceMappingURL=utilsSqlstatement.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsSQLite = void 0;\r\nconst utilsDelete_1 = require(\"./utilsDelete\");\r\nconst utilsFile_1 = require(\"./utilsFile\");\r\nconst utilsSqlstatement_1 = require(\"./utilsSqlstatement\");\r\n//const SQLITE_OPEN_READONLY = 1;\r\nclass UtilsSQLite {\r\n    constructor() {\r\n        this.fileUtil = new utilsFile_1.UtilsFile();\r\n        this.statUtil = new utilsSqlstatement_1.UtilsSQLStatement();\r\n        this.delUtil = new utilsDelete_1.UtilsDelete();\r\n        this.BCSQLite3 = require('better-sqlite3-multiple-ciphers');\r\n    }\r\n    /**\r\n     * OpenOrCreateDatabase\r\n     * @param pathDB\r\n     * @param password\r\n     */\r\n    openOrCreateDatabase(pathDB, password, readonly) {\r\n        const msg = 'OpenOrCreateDatabase';\r\n        // open sqlite3 database\r\n        let mDB;\r\n        if (!readonly) {\r\n            mDB = new this.BCSQLite3(pathDB, {\r\n                //        verbose: console.log,\r\n                fileMustExist: false,\r\n            });\r\n        }\r\n        else {\r\n            mDB = new this.BCSQLite3(pathDB, {\r\n                //        verbose: console.log,\r\n                readonly: true,\r\n                fileMustExist: true,\r\n            });\r\n        }\r\n        if (mDB != null) {\r\n            try {\r\n                this.dbChanges(mDB);\r\n            }\r\n            catch (err) {\r\n                const errmsg = err.message ? err.message : err;\r\n                throw new Error(`${msg} ${errmsg}`);\r\n            }\r\n            try {\r\n                // set the password\r\n                if (password.length > 0) {\r\n                    this.setCipherPragma(mDB, password);\r\n                }\r\n                // set Foreign Keys On\r\n                this.setForeignKeyConstraintsEnabled(mDB, true);\r\n            }\r\n            catch (err) {\r\n                const errmsg = err.message ? err.message : err;\r\n                throw new Error(`${msg} ${errmsg}`);\r\n            }\r\n            return mDB;\r\n        }\r\n        else {\r\n            throw new Error(msg + 'open database failed');\r\n        }\r\n    }\r\n    /**\r\n     * SetCipherPragma\r\n     * @param mDB\r\n     * @param password\r\n     */\r\n    setCipherPragma(mDB, passphrase) {\r\n        const msg = 'setCipherPragma';\r\n        try {\r\n            mDB.pragma(`cipher='sqlcipher'`);\r\n            mDB.pragma(`legacy=4`);\r\n            mDB.pragma(`key='${passphrase}'`);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * SetForeignKeyConstraintsEnabled\r\n     * @param mDB\r\n     * @param toggle\r\n     */\r\n    setForeignKeyConstraintsEnabled(mDB, toggle) {\r\n        const msg = 'SetForeignKeyConstraintsEnabled';\r\n        let key = 'OFF';\r\n        if (toggle) {\r\n            key = 'ON';\r\n        }\r\n        try {\r\n            mDB.pragma(`foreign_keys = '${key}'`);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * CloseDB\r\n     * @param mDB\r\n     */\r\n    closeDB(mDB) {\r\n        const msg = 'closeDB';\r\n        try {\r\n            mDB.close();\r\n            return;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetVersion\r\n     * @param mDB\r\n     */\r\n    getVersion(mDB) {\r\n        const msg = 'GetVersion';\r\n        try {\r\n            const result = mDB.pragma('user_version');\r\n            return result[0].user_version;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * SetVersion\r\n     * @param mDB\r\n     * @param version\r\n     */\r\n    setVersion(mDB, version) {\r\n        const msg = 'SetVersion';\r\n        try {\r\n            mDB.pragma(`user_version = '${version}'`);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * ChangePassword\r\n     * @param pathDB\r\n     * @param password\r\n     * @param newpassword\r\n     */\r\n    changePassword(pathDB, password, newpassword) {\r\n        let mDB;\r\n        const msg = 'ChangePassword';\r\n        try {\r\n            mDB = this.openOrCreateDatabase(pathDB, password, false);\r\n            this.pragmaReKey(mDB, password, newpassword);\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n        finally {\r\n            this.closeDB(mDB);\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * PragmaReKey\r\n     * @param mDB\r\n     * @param passphrase\r\n     * @param newpassphrase\r\n     */\r\n    pragmaReKey(mDB, passphrase, newpassphrase) {\r\n        const msg = 'PragmaReKey: ';\r\n        try {\r\n            mDB.pragma(`cipher='sqlcipher'`);\r\n            mDB.pragma(`legacy=4`);\r\n            mDB.pragma(`key='${passphrase}'`);\r\n            mDB.pragma(`rekey='${newpassphrase}'`);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * BeginTransaction\r\n     * @param db\r\n     * @param isOpen\r\n     */\r\n    beginTransaction(db, isOpen) {\r\n        // eslint-disable-next-line no-async-promise-executor\r\n        const msg = 'BeginTransaction: ';\r\n        if (!isOpen) {\r\n            throw new Error(`${msg} database not opened`);\r\n        }\r\n        const sql = 'BEGIN TRANSACTION;';\r\n        try {\r\n            db.exec(sql);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * RollbackTransaction\r\n     * @param db\r\n     * @param isOpen\r\n     */\r\n    rollbackTransaction(db, isOpen) {\r\n        const msg = 'RollbackTransaction: ';\r\n        if (!isOpen) {\r\n            throw new Error(`${msg} database not opened`);\r\n        }\r\n        const sql = 'ROLLBACK TRANSACTION;';\r\n        try {\r\n            db.exec(sql);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * CommitTransaction\r\n     * @param db\r\n     * @param isOpen\r\n     */\r\n    commitTransaction(db, isOpen) {\r\n        const msg = 'CommitTransaction: ';\r\n        if (!isOpen) {\r\n            throw new Error(`${msg} database not opened`);\r\n        }\r\n        const sql = 'COMMIT TRANSACTION;';\r\n        try {\r\n            db.exec(sql);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * DbChanges\r\n     * return total number of changes\r\n     * @param db\r\n     */\r\n    dbChanges(db) {\r\n        const msg = 'DbChanges: ';\r\n        let changes = 0;\r\n        try {\r\n            const statement = db.prepare('SELECT total_changes()');\r\n            const firstRow = statement.get();\r\n            if (firstRow != null) {\r\n                const key = Object.keys(firstRow)[0];\r\n                changes = firstRow[key];\r\n            }\r\n            return changes;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetLastId\r\n     * @param db\r\n     */\r\n    getLastId(db) {\r\n        const msg = 'GetLastId: ';\r\n        let lastId = -1;\r\n        try {\r\n            const statement = db.prepare('SELECT last_insert_rowid()');\r\n            const firstRow = statement.get();\r\n            if (firstRow != null) {\r\n                const key = Object.keys(firstRow)[0];\r\n                lastId = firstRow[key];\r\n            }\r\n            return lastId;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * Execute\r\n     * @param mDB\r\n     * @param sql\r\n     */\r\n    execute(mDB, sql, fromJson) {\r\n        const result = { changes: 0, lastId: -1 };\r\n        const msg = 'Execute';\r\n        let changes = -1;\r\n        let lastId = -1;\r\n        let initChanges = -1;\r\n        try {\r\n            initChanges = this.dbChanges(mDB);\r\n            let sqlStmt = sql;\r\n            if (sql.toLowerCase().includes('DELETE FROM'.toLowerCase()) ||\r\n                sql.toLowerCase().includes('INSERT INTO'.toLowerCase()) ||\r\n                sql.toLowerCase().includes('UPDATE'.toLowerCase())) {\r\n                sqlStmt = this.checkStatements(mDB, sql, fromJson);\r\n            }\r\n            this.execDB(mDB, sqlStmt);\r\n            changes = this.dbChanges(mDB) - initChanges;\r\n            lastId = this.getLastId(mDB);\r\n            result.changes = changes;\r\n            result.lastId = lastId;\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    checkStatements(mDB, sql, fromJson) {\r\n        // split the statements in an array of statement\r\n        let sqlStmt = sql.replace(/\\n/g, '');\r\n        // deal with trigger\r\n        sqlStmt = sqlStmt.replace(/end;/g, 'END;');\r\n        sqlStmt = sqlStmt.replace(/;END;/g, '&END;');\r\n        const sqlStmts = sqlStmt.split(';');\r\n        const resArr = [];\r\n        // loop through the statement\r\n        for (const stmt of sqlStmts) {\r\n            const method = stmt\r\n                .trim()\r\n                .substring(0, Math.min(stmt.trim().length, 6))\r\n                .toUpperCase();\r\n            let rStmt = stmt.trim();\r\n            switch (method) {\r\n                case 'CREATE':\r\n                    if (rStmt.includes('&END')) {\r\n                        rStmt = rStmt.replace(/&END/g, ';END');\r\n                    }\r\n                    break;\r\n                case 'DELETE':\r\n                    if (!fromJson && stmt.toLowerCase().includes('WHERE'.toLowerCase())) {\r\n                        const whereStmt = this.cleanStatement(`${stmt.trim()}`);\r\n                        rStmt = this.deleteSQL(mDB, whereStmt, []);\r\n                    }\r\n                    break;\r\n                case 'INSERT':\r\n                    if (stmt.toLowerCase().includes('VALUES'.toLowerCase())) {\r\n                        rStmt = this.cleanStatement(`${stmt.trim()}`);\r\n                    }\r\n                    break;\r\n                case 'UPDATE':\r\n                    if (stmt.toLowerCase().includes('SET'.toLowerCase())) {\r\n                        rStmt = this.cleanStatement(`${stmt.trim()}`);\r\n                    }\r\n                    break;\r\n                case 'SELECT':\r\n                    if (!fromJson && stmt.toLowerCase().includes('WHERE'.toLowerCase())) {\r\n                        rStmt = this.cleanStatement(`${stmt.trim()}`);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            resArr.push(rStmt);\r\n        }\r\n        sqlStmt = resArr.join(';');\r\n        return sqlStmt;\r\n    }\r\n    /**\r\n     * ExecDB\r\n     * @param mDB\r\n     * @param sql\r\n     */\r\n    execDB(mDB, sql) {\r\n        const msg = 'execDB: ';\r\n        try {\r\n            mDB.exec(sql);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * ExecuteSet\r\n     * @param mDB\r\n     * @param set\r\n     * @param fromJson\r\n     */\r\n    executeSet(mDB, set, fromJson, returnMode) {\r\n        const ret = { changes: 0, lastId: -1, values: [] };\r\n        let result = { changes: 0, lastId: -1 };\r\n        const msg = 'ExecuteSet';\r\n        for (let i = 0; i < set.length; i++) {\r\n            const statement = 'statement' in set[i] ? set[i].statement : null;\r\n            const values = 'values' in set[i] && set[i].values.length > 0 ? set[i].values : [];\r\n            if (statement == null) {\r\n                let msg = 'ExecuteSet: Error Nostatement';\r\n                msg += ` for index ${i}`;\r\n                throw new Error(msg);\r\n            }\r\n            try {\r\n                if (Array.isArray(values[0])) {\r\n                    for (const val of values) {\r\n                        const mVal = this.replaceUndefinedByNull(val);\r\n                        result = this.prepareRun(mDB, statement, mVal, fromJson, returnMode);\r\n                        ret.changes += result.changes;\r\n                        ret.lastId = result.lastId;\r\n                        const keys = Object.keys(result);\r\n                        if (keys.includes('values') && result.values.length > 0) {\r\n                            ret.values.push(result.values);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (values.length > 0) {\r\n                        const mVal = this.replaceUndefinedByNull(values);\r\n                        result = this.prepareRun(mDB, statement, mVal, fromJson, returnMode);\r\n                    }\r\n                    else {\r\n                        result = this.prepareRun(mDB, statement, [], fromJson, returnMode);\r\n                    }\r\n                    ret.changes += result.changes;\r\n                    ret.lastId = result.lastId;\r\n                    const keys = Object.keys(result);\r\n                    if (keys.includes('values') && result.values.length > 0) {\r\n                        ret.values.push(result.values);\r\n                    }\r\n                }\r\n            }\r\n            catch (err) {\r\n                const errmsg = err.message ? err.message : err;\r\n                throw new Error(`${msg} ${errmsg}`);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * PrepareRun\r\n     * @param mDB\r\n     * @param statement\r\n     * @param values\r\n     * @param fromJson\r\n     */\r\n    prepareRun(mDB, statement, values, fromJson, returnMode) {\r\n        const result = { changes: 0, lastId: -1 };\r\n        const msg = 'PrepareRun';\r\n        const stmtType = statement\r\n            .replace(/\\n/g, '')\r\n            .trim()\r\n            .substring(0, 6)\r\n            .toUpperCase();\r\n        let sqlStmt = statement;\r\n        try {\r\n            if (!fromJson && stmtType === 'DELETE') {\r\n                sqlStmt = this.deleteSQL(mDB, statement, values);\r\n            }\r\n            const mValues = values ? values : [];\r\n            let mVal = [];\r\n            if (mValues.length > 0) {\r\n                mVal = this.replaceUndefinedByNull(mValues);\r\n            }\r\n            else {\r\n                const findVals = sqlStmt.match(/\\?/gi);\r\n                const nbValues = findVals ? findVals.length : 0;\r\n                for (let i = 0; i < nbValues; i++) {\r\n                    mVal.push(null);\r\n                }\r\n            }\r\n            const ret = this.runExec(mDB, sqlStmt, mVal, returnMode);\r\n            if (ret.values != null) {\r\n                result.values = ret.values;\r\n                result.changes = ret.changes;\r\n                result.lastId = ret.lastInsertRowid;\r\n            }\r\n            else {\r\n                result.changes = ret.changes;\r\n                result.lastId = ret.lastInsertRowid;\r\n            }\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    runExec(mDB, stmt, values = [], returnMode) {\r\n        let result = { changes: 0, lastInsertRowid: -1, values: [] };\r\n        const msg = 'runExec: ';\r\n        try {\r\n            const cStmt = this.cleanStatement(stmt);\r\n            const params = this.getStmtAndNames(cStmt, returnMode);\r\n            switch (params.mMode) {\r\n                case 'one': {\r\n                    const iniChanges = this.dbChanges(mDB);\r\n                    if (values.length === 0) {\r\n                        const value = mDB.prepare(params.stmt).get();\r\n                        result.values.push(value);\r\n                        result.lastInsertRowid = this.getLastId(mDB);\r\n                    }\r\n                    else {\r\n                        const lowerId = this.getLastId(mDB) + 1;\r\n                        const statement = mDB.prepare(params.stmt);\r\n                        const res = statement.run(values);\r\n                        result.lastInsertRowid = res.lastInsertRowid;\r\n                        const sql = `SELECT ${params.names} FROM ${params.tableName} WHERE rowid = ${lowerId};`;\r\n                        const value = this.queryOne(mDB, sql, []);\r\n                        result.values.push(value);\r\n                    }\r\n                    result.changes = this.dbChanges(mDB) - iniChanges;\r\n                    break;\r\n                }\r\n                case 'all': {\r\n                    const iniChanges = this.dbChanges(mDB);\r\n                    if (values.length === 0) {\r\n                        result.values = mDB.prepare(params.stmt).all();\r\n                        result.lastInsertRowid = this.getLastId(mDB);\r\n                    }\r\n                    else {\r\n                        const lowerId = this.getLastId(mDB) + 1;\r\n                        const statement = mDB.prepare(params.stmt);\r\n                        const res = statement.run(values);\r\n                        const upperId = res.lastInsertRowid;\r\n                        const sql = `SELECT ${params.names} FROM ${params.tableName} WHERE rowid BETWEEN ${lowerId} AND ${upperId};`;\r\n                        result.values = this.queryAll(mDB, sql, []);\r\n                        result.lastInsertRowid = res.lastInsertRowid;\r\n                    }\r\n                    result.changes = this.dbChanges(mDB) - iniChanges;\r\n                    break;\r\n                }\r\n                default: {\r\n                    const statement = mDB.prepare(params.stmt);\r\n                    if (values != null && values.length > 0) {\r\n                        result = statement.run(values);\r\n                    }\r\n                    else {\r\n                        result = statement.run();\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * replaceUndefinedByNull\r\n     * @param values\r\n     * @returns\r\n     */\r\n    replaceUndefinedByNull(values) {\r\n        const retValues = [];\r\n        if (values.length > 0) {\r\n            for (const val of values) {\r\n                let mVal = val;\r\n                if (typeof val === 'undefined')\r\n                    mVal = null;\r\n                retValues.push(mVal);\r\n            }\r\n        }\r\n        return retValues;\r\n    }\r\n    /**\r\n     * deleteSQL\r\n     * @param mDB\r\n     * @param statement\r\n     * @param values\r\n     * @returns\r\n     */\r\n    deleteSQL(mDB, statement, values) {\r\n        let sqlStmt = statement;\r\n        const msg = 'DeleteSQL';\r\n        try {\r\n            const isLast = this.isLastModified(mDB, true);\r\n            const isDel = this.isSqlDeleted(mDB, true);\r\n            if (!isLast || !isDel) {\r\n                return sqlStmt;\r\n            }\r\n            // Replace DELETE by UPDATE\r\n            // set sql_deleted to 1 and the last_modified to\r\n            // timenow\r\n            const whereClause = this.statUtil.extractWhereClause(sqlStmt);\r\n            if (!whereClause) {\r\n                const msg = 'deleteSQL: cannot find a WHERE clause';\r\n                throw new Error(`${msg}`);\r\n            }\r\n            const tableName = this.statUtil.extractTableName(sqlStmt);\r\n            if (!tableName) {\r\n                const msg = 'deleteSQL: cannot find a WHERE clause';\r\n                throw new Error(`${msg}`);\r\n            }\r\n            const colNames = this.statUtil.extractColumnNames(whereClause);\r\n            if (colNames.length === 0) {\r\n                const msg = 'deleteSQL: Did not find column names in the WHERE Statement';\r\n                throw new Error(`${msg}`);\r\n            }\r\n            const setStmt = 'sql_deleted = 1';\r\n            // Find REFERENCES if any and update the sql_deleted\r\n            // column\r\n            const hasToUpdate = this.findReferencesAndUpdate(mDB, tableName, whereClause, colNames, values);\r\n            if (hasToUpdate) {\r\n                const whereStmt = whereClause.endsWith(';')\r\n                    ? whereClause.slice(0, -1)\r\n                    : whereClause;\r\n                sqlStmt = `UPDATE ${tableName} SET ${setStmt} WHERE ${whereStmt} AND sql_deleted = 0;`;\r\n            }\r\n            else {\r\n                sqlStmt = '';\r\n            }\r\n            return sqlStmt;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * findReferencesAndUpdate\r\n     * @param mDB\r\n     * @param tableName\r\n     * @param whereStmt\r\n     * @param initColNames\r\n     * @param values\r\n     * @returns\r\n     */\r\n    findReferencesAndUpdate(mDB, tableName, whereStmt, initColNames, values) {\r\n        try {\r\n            const retBool = true;\r\n            const result = this.getReferences(mDB, tableName);\r\n            const references = result.retRefs;\r\n            const tableNameWithRefs = result.tableWithRefs;\r\n            if (references.length <= 0) {\r\n                return retBool;\r\n            }\r\n            if (tableName === tableNameWithRefs) {\r\n                return retBool;\r\n            }\r\n            // Loop through references\r\n            for (const ref of references) {\r\n                // Extract the FOREIGN KEY constraint info from the ref statement\r\n                const foreignKeyInfo = this.statUtil.extractForeignKeyInfo(ref);\r\n                // Get the tableName of the references\r\n                const refTable = foreignKeyInfo.tableName;\r\n                if (refTable === '' || refTable !== tableName) {\r\n                    continue;\r\n                }\r\n                // Get the with ref column names\r\n                const withRefsNames = foreignKeyInfo.forKeys;\r\n                // Get the column names\r\n                const colNames = foreignKeyInfo.refKeys;\r\n                if (colNames.length !== withRefsNames.length) {\r\n                    const msg = \"findReferencesAndUpdate: mismatch length\";\r\n                    throw new Error(msg);\r\n                }\r\n                const action = foreignKeyInfo.action;\r\n                if (action === 'NO_ACTION') {\r\n                    continue;\r\n                }\r\n                const updTableName = tableNameWithRefs;\r\n                const updColNames = withRefsNames;\r\n                let results = {\r\n                    uWhereStmt: '',\r\n                    setStmt: '',\r\n                };\r\n                if (!this.delUtil.checkValuesMatch(withRefsNames, initColNames)) {\r\n                    // Case: no match\r\n                    // Search for related items in tableName\r\n                    const result = this.searchForRelatedItems(mDB, updTableName, tableName, whereStmt, withRefsNames, colNames, values);\r\n                    if (result.relatedItems.length === 0 && result.key.length <= 0) {\r\n                        continue;\r\n                    }\r\n                    if (updTableName !== tableName) {\r\n                        switch (action) {\r\n                            case 'RESTRICT':\r\n                                results = this.delUtil.upDateWhereForRestrict(result);\r\n                                break;\r\n                            case 'CASCADE':\r\n                                results = this.delUtil.upDateWhereForCascade(result);\r\n                                break;\r\n                            default:\r\n                                results = this.delUtil.upDateWhereForDefault(withRefsNames, result);\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Not implemented. Please transfer your example to the maintener');\r\n                }\r\n                if (results.setStmt.length > 0 &&\r\n                    results.uWhereStmt.length > 0) {\r\n                    this.executeUpdateForDelete(mDB, updTableName, results.uWhereStmt, results.setStmt, updColNames, values);\r\n                }\r\n            }\r\n            return retBool;\r\n        }\r\n        catch (error) {\r\n            const msg = error.message ? error.message : error;\r\n            throw new Error(msg);\r\n        }\r\n    }\r\n    /**\r\n     * getReferences\r\n     * @param db\r\n     * @param tableName\r\n     * @returns\r\n     */\r\n    getReferences(db, tableName) {\r\n        const sqlStmt = \"SELECT sql FROM sqlite_master \" +\r\n            \"WHERE sql LIKE('%FOREIGN KEY%') AND sql LIKE('%REFERENCES%') AND \" +\r\n            \"sql LIKE('%\" + tableName + \"%') AND sql LIKE('%ON DELETE%');\";\r\n        try {\r\n            const res = this.queryAll(db, sqlStmt, []);\r\n            // get the reference's string(s)\r\n            let retRefs = [];\r\n            let tableWithRefs = \"\";\r\n            if (res.length > 0) {\r\n                const result = this.getRefs(res[0].sql);\r\n                retRefs = result.foreignKeys;\r\n                tableWithRefs = result.tableName;\r\n            }\r\n            return { tableWithRefs: tableWithRefs, retRefs: retRefs };\r\n        }\r\n        catch (err) {\r\n            const error = err.message ? err.message : err;\r\n            const msg = `getReferences: ${error}`;\r\n            throw new Error(msg);\r\n        }\r\n    }\r\n    /**\r\n     * getRefs\r\n     * @param sqlStatement\r\n     * @returns\r\n     */\r\n    getRefs(sqlStatement) {\r\n        let tableName = '';\r\n        const foreignKeys = [];\r\n        const statement = this.statUtil.flattenMultilineString(sqlStatement);\r\n        try {\r\n            // Regular expression pattern to match the table name\r\n            const tableNamePattern = /CREATE\\s+TABLE\\s+(\\w+)\\s+\\(/;\r\n            const tableNameMatch = statement.match(tableNamePattern);\r\n            if (tableNameMatch) {\r\n                tableName = tableNameMatch[1];\r\n            }\r\n            // Regular expression pattern to match the FOREIGN KEY constraints\r\n            const foreignKeyPattern = /FOREIGN\\s+KEY\\s+\\([^)]+\\)\\s+REFERENCES\\s+(\\w+)\\s*\\([^)]+\\)\\s+ON\\s+DELETE\\s+(CASCADE|RESTRICT|SET\\s+DEFAULT|SET\\s+NULL|NO\\s+ACTION)/g;\r\n            const foreignKeyMatches = statement.matchAll(foreignKeyPattern);\r\n            for (const foreignKeyMatch of foreignKeyMatches) {\r\n                const foreignKey = foreignKeyMatch[0];\r\n                foreignKeys.push(foreignKey);\r\n            }\r\n        }\r\n        catch (error) {\r\n            const msg = `getRefs: Error creating regular expression: ${error}`;\r\n            throw new Error(msg);\r\n        }\r\n        return { tableName, foreignKeys };\r\n    }\r\n    /**\r\n     * executeUpdateForDelete\r\n     * @param mDB\r\n     * @param tableName\r\n     * @param whereStmt\r\n     * @param setStmt\r\n     * @param colNames\r\n     * @param values\r\n     */\r\n    executeUpdateForDelete(mDB, tableName, whereStmt, setStmt, colNames, values) {\r\n        try {\r\n            let lastId = -1;\r\n            // Update sql_deleted for this references\r\n            const stmt = `UPDATE ${tableName} SET ${setStmt} ${whereStmt}`;\r\n            const selValues = [];\r\n            if (values.length > 0) {\r\n                const arrVal = whereStmt.split('?');\r\n                if (arrVal[arrVal.length - 1] === ';') {\r\n                    arrVal.pop();\r\n                }\r\n                for (let jdx = 0; jdx < arrVal.length; jdx++) {\r\n                    for (const updVal of colNames) {\r\n                        const indices = this.statUtil.indicesOf(arrVal[jdx], updVal);\r\n                        if (indices.length > 0) {\r\n                            selValues.push(values[jdx]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const retObj = this.runExec(mDB, stmt, selValues, 'no');\r\n            lastId = retObj[\"lastInsertRowid\"];\r\n            if (lastId === -1) {\r\n                const msg = `UPDATE sql_deleted failed for table: ${tableName}`;\r\n                throw new Error(msg);\r\n            }\r\n        }\r\n        catch (error) {\r\n            const msg = error.message ? error.message : error;\r\n            throw new Error(msg);\r\n        }\r\n    }\r\n    /**\r\n     * QueryAll\r\n     * @param mDB\r\n     * @param sql\r\n     * @param values\r\n     */\r\n    queryAll(mDB, sql, values) {\r\n        const msg = 'QueryAll';\r\n        try {\r\n            const cSql = this.cleanStatement(sql);\r\n            const stmt = mDB.prepare(cSql);\r\n            let rows;\r\n            if (values != null && values.length > 0) {\r\n                rows = stmt.all(values);\r\n            }\r\n            else {\r\n                rows = stmt.all();\r\n            }\r\n            if (rows == null) {\r\n                rows = [];\r\n            }\r\n            return rows;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * QueryOne\r\n     * @param mDB\r\n     * @param sql\r\n     * @param values\r\n     */\r\n    queryOne(mDB, sql, values) {\r\n        const msg = 'QueryOne';\r\n        try {\r\n            const cSql = this.cleanStatement(sql);\r\n            const stmt = mDB.prepare(cSql);\r\n            let row;\r\n            if (values != null && values.length > 0) {\r\n                row = stmt.get(values);\r\n            }\r\n            else {\r\n                row = stmt.get();\r\n            }\r\n            return row;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetTablesNames\r\n     * @param mDb\r\n     */\r\n    getTablesNames(mDb) {\r\n        const msg = 'getTablesNames';\r\n        let sql = 'SELECT name FROM sqlite_master WHERE ';\r\n        sql += \"type='table' AND name NOT LIKE 'sync_table' \";\r\n        sql += \"AND name NOT LIKE '_temp_%' \";\r\n        sql += \"AND name NOT LIKE 'sqlite_%' \";\r\n        sql += 'ORDER BY rootpage DESC;';\r\n        const retArr = [];\r\n        try {\r\n            const retQuery = this.queryAll(mDb, sql, []);\r\n            for (const query of retQuery) {\r\n                retArr.push(query.name);\r\n            }\r\n            return retArr;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetViewsNames\r\n     * @param mDb\r\n     */\r\n    getViewsNames(mDb) {\r\n        const msg = 'GetViewsNames';\r\n        let sql = 'SELECT name FROM sqlite_master WHERE ';\r\n        sql += \"type='view' AND name NOT LIKE 'sqlite_%' \";\r\n        sql += 'ORDER BY rootpage DESC;';\r\n        const retArr = [];\r\n        try {\r\n            const retQuery = this.queryAll(mDb, sql, []);\r\n            for (const query of retQuery) {\r\n                retArr.push(query.name);\r\n            }\r\n            return retArr;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * isLastModified\r\n     * @param mDB\r\n     * @param isOpen\r\n     */\r\n    isLastModified(mDB, isOpen) {\r\n        const msg = 'IsLastModified';\r\n        if (!isOpen) {\r\n            throw new Error(`${msg} database not opened`);\r\n        }\r\n        try {\r\n            const tableList = this.getTablesNames(mDB);\r\n            for (const table of tableList) {\r\n                const tableNamesTypes = this.getTableColumnNamesTypes(mDB, table);\r\n                const tableColumnNames = tableNamesTypes.names;\r\n                if (tableColumnNames.includes('last_modified')) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    /**\r\n     * isSqlDeleted\r\n     * @param mDB\r\n     * @param isOpen\r\n     */\r\n    isSqlDeleted(mDB, isOpen) {\r\n        const msg = 'IsSqlDeleted';\r\n        if (!isOpen) {\r\n            throw new Error(`${msg} database not opened`);\r\n        }\r\n        try {\r\n            const tableList = this.getTablesNames(mDB);\r\n            for (const table of tableList) {\r\n                const tableNamesTypes = this.getTableColumnNamesTypes(mDB, table);\r\n                const tableColumnNames = tableNamesTypes.names;\r\n                if (tableColumnNames.includes('sql_deleted')) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    getJournalMode(mDB) {\r\n        const msg = 'getJournalMode';\r\n        try {\r\n            const retMode = mDB.pragma('journal_mode');\r\n            console.log(`journal_mode: ${retMode[0].journal_mode}`);\r\n            return retMode[0].journal_mode;\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    async isDatabaseEncrypted(dbName) {\r\n        const msg = 'isDatabaseEncrypted';\r\n        try {\r\n            const isExists = this.fileUtil.isFileExists(dbName);\r\n            if (isExists) {\r\n                const filePath = this.fileUtil.getFilePath(dbName);\r\n                return await this.isDBEncrypted(filePath);\r\n            }\r\n            else {\r\n                throw new Error(`${msg}: Database ${dbName} does not exist`);\r\n            }\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    async isDBEncrypted(filePath) {\r\n        try {\r\n            const retStr = await this.fileUtil.readFileAsPromise(filePath, {\r\n                start: 0,\r\n                end: 12,\r\n            });\r\n            if (retStr === 'SQLite format')\r\n                return false;\r\n            else\r\n                return true;\r\n        }\r\n        catch (error) {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * GetTableColumnNamesTypes\r\n     * @param mDB\r\n     * @param tableName\r\n     */\r\n    getTableColumnNamesTypes(mDB, tableName) {\r\n        const msg = 'getTableColumnNamesTypes';\r\n        try {\r\n            const infos = mDB.pragma(`table_info('${tableName}')`);\r\n            const retNames = [];\r\n            const retTypes = [];\r\n            for (const info of infos) {\r\n                retNames.push(info.name);\r\n                retTypes.push(info.type);\r\n            }\r\n            return { names: retNames, types: retTypes };\r\n        }\r\n        catch (err) {\r\n            const errmsg = err.message ? err.message : err;\r\n            throw new Error(`${msg} ${errmsg}`);\r\n        }\r\n    }\r\n    searchForRelatedItems(mDB, updTableName, tableName, whStmt, withRefsNames, colNames, values) {\r\n        const relatedItems = [];\r\n        let key = \"\";\r\n        const t1Names = withRefsNames.map((name) => `t1.${name}`);\r\n        const t2Names = colNames.map((name) => `t2.${name}`);\r\n        console.log(\" whStmt \", whStmt);\r\n        console.log(\" t1Names \", t1Names);\r\n        console.log(\" t2Names \", t2Names);\r\n        try {\r\n            // addPrefix to the whereClause and swap colNames with  withRefsNames\r\n            let whereClause = this.statUtil\r\n                .addPrefixToWhereClause(whStmt, colNames, withRefsNames, \"t2.\");\r\n            // look at the whereclause and change colNames with  withRefsNames\r\n            if (whereClause.endsWith(\";\")) {\r\n                whereClause = whereClause.slice(0, -1);\r\n            }\r\n            console.log(\" whereClause \", whereClause);\r\n            const resultString = t1Names\r\n                .map((t1, index) => `${t1} = ${t2Names[index]}`)\r\n                .join(\" AND \");\r\n            const sql = `SELECT t1.rowid FROM ${updTableName} t1 ` +\r\n                `JOIN ${tableName} t2 ON ${resultString} ` +\r\n                `WHERE ${whereClause} AND t1.sql_deleted = 0;`;\r\n            console.log(\" sql \", sql);\r\n            const vals = this.queryAll(mDB, sql, values);\r\n            if (vals.length > 0) {\r\n                key = (Object.keys(vals[0]))[0];\r\n                relatedItems.push(...vals);\r\n            }\r\n            return { key: key, relatedItems: relatedItems };\r\n        }\r\n        catch (error) {\r\n            const msg = error.message ? error.message : error;\r\n            throw new Error(msg);\r\n        }\r\n    }\r\n    cleanStatement(stmt) {\r\n        let sql = '';\r\n        if (stmt.toLowerCase().includes('INSERT INTO'.toLowerCase()) ||\r\n            stmt.toLowerCase().includes('SELECT'.toLowerCase()) ||\r\n            stmt.toLowerCase().includes('UPDATE'.toLowerCase()) ||\r\n            stmt.toLowerCase().includes('DELETE FROM'.toLowerCase())) {\r\n            // check for JSON string\r\n            sql = this.dealJsonString(stmt);\r\n            // sql = sql.replaceAll('\"', \"'\"); // commented out to ensure compatibility with typeorm\r\n            sql = sql.replaceAll('§', '\"');\r\n        }\r\n        else {\r\n            sql = stmt;\r\n        }\r\n        return sql;\r\n    }\r\n    findIndex(str, char) {\r\n        const a = [];\r\n        for (let i = str.length; i--;)\r\n            if (str[i] == char)\r\n                a.push(i);\r\n        return a.reverse();\r\n    }\r\n    dealJsonString(stmt) {\r\n        let retStmt = stmt;\r\n        const oJ = this.findIndex(stmt, '{');\r\n        const eJ = this.findIndex(stmt, '}');\r\n        for (let i = 0; i < oJ.length; i++) {\r\n            const g = retStmt.substring(oJ[i] + 1, eJ[i]).replaceAll('\"', '§');\r\n            retStmt = retStmt.substring(0, oJ[i] + 1) + g + retStmt.substring(eJ[i]);\r\n        }\r\n        return retStmt;\r\n    }\r\n    getStmtAndNames(stmt, returnMode) {\r\n        const retObj = {};\r\n        const mStmt = stmt;\r\n        if (mStmt.toUpperCase().includes('RETURNING') &&\r\n            (returnMode === 'all' || returnMode === 'one')) {\r\n            retObj.tableName = this.getTableName(mStmt);\r\n            retObj.mMode = returnMode;\r\n            const idx = mStmt.toUpperCase().indexOf('RETURNING') + 9;\r\n            const names = mStmt.substring(idx).trim();\r\n            retObj.names = names.slice(-1) === ';' ? names.slice(0, -1) : names;\r\n            retObj.stmt = mStmt;\r\n        }\r\n        else {\r\n            retObj.mMode = 'no';\r\n            if (mStmt.toUpperCase().includes('RETURNING')) {\r\n                const idx = mStmt.toUpperCase().indexOf('RETURNING');\r\n                retObj.stmt = mStmt.slice(0, idx).trim() + ';';\r\n            }\r\n            else {\r\n                retObj.stmt = mStmt;\r\n            }\r\n        }\r\n        return retObj;\r\n    }\r\n    getTableName(sqlStatement) {\r\n        const patterns = {\r\n            insert: /INSERT\\s+INTO\\s+(\\w+)/i,\r\n            delete: /DELETE\\s+FROM\\s+(\\w+)/i,\r\n            update: /UPDATE\\s+(\\w+)/i,\r\n            select: /SELECT.*\\s+FROM\\s+(\\w+)/i,\r\n        };\r\n        let tableName = null;\r\n        Object.keys(patterns).some((key) => {\r\n            const pattern = patterns[key];\r\n            const match = pattern.exec(sqlStatement);\r\n            if (match) {\r\n                tableName = match[1];\r\n                return true; // Stop iterating through patterns\r\n            }\r\n            return false;\r\n        });\r\n        return tableName;\r\n    }\r\n}\r\nexports.UtilsSQLite = UtilsSQLite;\r\n//# sourceMappingURL=utilsSQLite.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsJson = void 0;\r\nconst utilsSQLite_1 = require(\"../utilsSQLite\");\r\nclass UtilsJson {\r\n    constructor() {\r\n        this.sqliteUtil = new utilsSQLite_1.UtilsSQLite();\r\n    }\r\n    /**\r\n     * IsTableExists\r\n     * @param mDB\r\n     * @param isOpen\r\n     * @param tableName\r\n     */\r\n    isTableExists(mDB, isOpen, tableName) {\r\n        const msg = 'IsTableExists';\r\n        let ret = false;\r\n        if (!isOpen) {\r\n            throw new Error(`${msg} database not opened`);\r\n        }\r\n        let query = 'SELECT name FROM sqlite_master WHERE ';\r\n        query += `type='table' AND name='${tableName}';`;\r\n        const rows = this.sqliteUtil.queryAll(mDB, query, []);\r\n        if (rows.length > 0) {\r\n            ret = true;\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * IsViewExists\r\n     * @param db\r\n     * @param isOpen\r\n     * @param viewName\r\n     */\r\n    isViewExists(mDB, isOpen, viewName) {\r\n        const msg = 'IsViewExists';\r\n        let ret = false;\r\n        if (!isOpen) {\r\n            throw new Error(`${msg} database not opened`);\r\n        }\r\n        let query = 'SELECT name FROM sqlite_master WHERE ';\r\n        query += `type='view' AND name='${viewName}';`;\r\n        const rows = this.sqliteUtil.queryAll(mDB, query, []);\r\n        if (rows.length > 0) {\r\n            ret = true;\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * CreateSchema\r\n     * @param mDB\r\n     * @param jsonData\r\n     */\r\n    createSchema(mDB, jsonData) {\r\n        // create the database schema\r\n        const msg = 'CreateSchema';\r\n        let changes = 0;\r\n        try {\r\n            // start a transaction\r\n            this.sqliteUtil.beginTransaction(mDB, true);\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n        const stmts = this.createSchemaStatement(jsonData);\r\n        if (stmts.length > 0) {\r\n            const schemaStmt = stmts.join('\\n');\r\n            try {\r\n                const results = this.sqliteUtil.execute(mDB, schemaStmt, true);\r\n                changes = results.changes;\r\n                if (changes < 0) {\r\n                    try {\r\n                        this.sqliteUtil.rollbackTransaction(mDB, true);\r\n                    }\r\n                    catch (err) {\r\n                        throw new Error(`${msg} changes < 0 ${err}`);\r\n                    }\r\n                }\r\n            }\r\n            catch (err) {\r\n                const msg = err;\r\n                try {\r\n                    this.sqliteUtil.rollbackTransaction(mDB, true);\r\n                    throw new Error(`CreateSchema: ${msg}`);\r\n                }\r\n                catch (err) {\r\n                    throw new Error(`${msg} changes < 0${err}: ${msg}`);\r\n                }\r\n            }\r\n        }\r\n        try {\r\n            this.sqliteUtil.commitTransaction(mDB, true);\r\n            return changes;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * CreateSchemaStatement\r\n     * @param jsonData\r\n     */\r\n    createSchemaStatement(jsonData) {\r\n        const msg = 'CreateSchemaStatement';\r\n        const statements = [];\r\n        let isLastModified = false;\r\n        let isSqlDeleted = false;\r\n        // Prepare the statement to execute\r\n        try {\r\n            for (const jTable of jsonData.tables) {\r\n                if (jTable.schema != null && jTable.schema.length >= 1) {\r\n                    // create table\r\n                    statements.push('CREATE TABLE IF NOT EXISTS ' + `${jTable.name} (`);\r\n                    for (let j = 0; j < jTable.schema.length; j++) {\r\n                        if (j === jTable.schema.length - 1) {\r\n                            if (jTable.schema[j].column) {\r\n                                statements.push(`${jTable.schema[j].column} ${jTable.schema[j].value}`);\r\n                                if (jTable.schema[j].column === 'last_modified') {\r\n                                    isLastModified = true;\r\n                                }\r\n                                if (jTable.schema[j].column === 'sql_deleted') {\r\n                                    isSqlDeleted = true;\r\n                                }\r\n                            }\r\n                            else if (jTable.schema[j].foreignkey) {\r\n                                statements.push(`FOREIGN KEY (${jTable.schema[j].foreignkey}) ${jTable.schema[j].value}`);\r\n                            }\r\n                            else if (jTable.schema[j].constraint) {\r\n                                statements.push(`CONSTRAINT ${jTable.schema[j].constraint} ${jTable.schema[j].value}`);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (jTable.schema[j].column) {\r\n                                statements.push(`${jTable.schema[j].column} ${jTable.schema[j].value},`);\r\n                                if (jTable.schema[j].column === 'last_modified') {\r\n                                    isLastModified = true;\r\n                                }\r\n                                if (jTable.schema[j].column === 'sql_deleted') {\r\n                                    isSqlDeleted = true;\r\n                                }\r\n                            }\r\n                            else if (jTable.schema[j].foreignkey) {\r\n                                statements.push(`FOREIGN KEY (${jTable.schema[j].foreignkey}) ${jTable.schema[j].value},`);\r\n                            }\r\n                            else if (jTable.schema[j].constraint) {\r\n                                statements.push(`CONSTRAINT ${jTable.schema[j].constraint} ${jTable.schema[j].value},`);\r\n                            }\r\n                        }\r\n                    }\r\n                    statements.push(');');\r\n                    if (isLastModified && isSqlDeleted) {\r\n                        // create trigger last_modified associated with the table\r\n                        let trig = 'CREATE TRIGGER IF NOT EXISTS ';\r\n                        trig += `${jTable.name}`;\r\n                        trig += `_trigger_last_modified `;\r\n                        trig += `AFTER UPDATE ON ${jTable.name} `;\r\n                        trig += 'FOR EACH ROW WHEN NEW.last_modified < ';\r\n                        trig += 'OLD.last_modified BEGIN UPDATE ';\r\n                        trig += `${jTable.name} `;\r\n                        trig += `SET last_modified = `;\r\n                        trig += \"(strftime('%s','now')) WHERE id=OLD.id; END;\";\r\n                        statements.push(trig);\r\n                    }\r\n                }\r\n                if (jTable.indexes != null && jTable.indexes.length >= 1) {\r\n                    for (const jIndex of jTable.indexes) {\r\n                        const tableName = jTable.name;\r\n                        let stmt = `CREATE ${Object.keys(jIndex).includes('mode') ? jIndex.mode + ' ' : ''} INDEX IF NOT EXISTS `;\r\n                        stmt += `${jIndex.name} ON ${tableName} (${jIndex.value});`;\r\n                        statements.push(stmt);\r\n                    }\r\n                }\r\n                if (jTable.triggers != null && jTable.triggers.length >= 1) {\r\n                    for (const jTrg of jTable.triggers) {\r\n                        const tableName = jTable.name;\r\n                        if (jTrg.timeevent.toUpperCase().endsWith(' ON')) {\r\n                            jTrg.timeevent = jTrg.timeevent.substring(0, jTrg.timeevent.length - 3);\r\n                        }\r\n                        let stmt = `CREATE TRIGGER IF NOT EXISTS `;\r\n                        stmt += `${jTrg.name} ${jTrg.timeevent} ON ${tableName} `;\r\n                        if (jTrg.condition)\r\n                            stmt += `${jTrg.condition} `;\r\n                        stmt += `${jTrg.logic};`;\r\n                        statements.push(stmt);\r\n                    }\r\n                }\r\n            }\r\n            return statements;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * CreateDataTable\r\n     * @param mDB\r\n     * @param table\r\n     * @param mode\r\n     */\r\n    createDataTable(mDB, table, mode) {\r\n        let lastId = -1;\r\n        const msg = 'CreateDataTable';\r\n        let results;\r\n        try {\r\n            // Check if the table exists\r\n            const tableExists = this.isTableExists(mDB, true, table.name);\r\n            if (!tableExists) {\r\n                throw new Error(`${msg} ${table.name} does not exist`);\r\n            }\r\n            // Get the column names and types\r\n            const tableNamesTypes = this.sqliteUtil.getTableColumnNamesTypes(mDB, table.name);\r\n            const tableColumnTypes = tableNamesTypes.types;\r\n            const tableColumnNames = tableNamesTypes.names;\r\n            if (tableColumnTypes.length === 0) {\r\n                throw new Error(`${msg} ${table.name} info does not exist`);\r\n            }\r\n            // Loop on Table Values\r\n            for (let j = 0; j < table.values.length; j++) {\r\n                let row = table.values[j];\r\n                let isRun = true;\r\n                const stmt = this.createRowStatement(mDB, tableColumnNames, row, j, table.name, mode);\r\n                isRun = this.checkUpdate(mDB, stmt, row, table.name, tableColumnNames);\r\n                if (isRun) {\r\n                    if (stmt.substring(0, 6).toUpperCase() === 'DELETE') {\r\n                        row = [];\r\n                    }\r\n                    results = this.sqliteUtil.prepareRun(mDB, stmt, row, true, 'no');\r\n                    lastId = results.lastId;\r\n                    if (lastId < 0) {\r\n                        throw new Error(`${msg} lastId < 0`);\r\n                    }\r\n                }\r\n                else {\r\n                    lastId = 0;\r\n                }\r\n            }\r\n            return results;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * CreateRowStatement\r\n     * @param mDB\r\n     * @param tColNames\r\n     * @param row\r\n     * @param j\r\n     * @param tableName\r\n     * @param mode\r\n     * @returns\r\n     */\r\n    createRowStatement(mDB, tColNames, row, j, tableName, mode) {\r\n        // Check the row number of columns\r\n        const msg = 'CreateRowStatement';\r\n        if (row.length != tColNames.length ||\r\n            row.length === 0 ||\r\n            tColNames.length === 0) {\r\n            throw new Error(`${msg} Table ${tableName} ` + `values row ${j} not correct length`);\r\n        }\r\n        try {\r\n            const retisIdExists = this.isIdExists(mDB, tableName, tColNames[0], row[0]);\r\n            let stmt;\r\n            if (mode === 'full' || (mode === 'partial' && !retisIdExists)) {\r\n                // Insert\r\n                const nameString = tColNames.join();\r\n                const questionMarkString = this.createQuestionMarkString(tColNames.length);\r\n                stmt = `INSERT INTO ${tableName} (${nameString}) VALUES (`;\r\n                stmt += `${questionMarkString});`;\r\n            }\r\n            else {\r\n                // Update or Delete\r\n                let isUpdate = true;\r\n                const isColDeleted = (element) => element === `sql_deleted`;\r\n                const idxDelete = tColNames.findIndex(isColDeleted);\r\n                if (idxDelete >= 0) {\r\n                    if (row[idxDelete] === 1) {\r\n                        isUpdate = false;\r\n                        stmt = `DELETE FROM ${tableName} WHERE `;\r\n                        if (typeof row[0] == 'string') {\r\n                            stmt += `${tColNames[0]} = '${row[0]}';`;\r\n                        }\r\n                        else {\r\n                            stmt += `${tColNames[0]} = ${row[0]};`;\r\n                        }\r\n                    }\r\n                }\r\n                if (isUpdate) {\r\n                    // Update\r\n                    const setString = this.setNameForUpdate(tColNames);\r\n                    if (setString.length === 0) {\r\n                        throw new Error(`${msg} Table ${tableName} ` +\r\n                            `values row ${j} not set to String`);\r\n                    }\r\n                    stmt = `UPDATE ${tableName} SET ${setString} WHERE `;\r\n                    if (typeof row[0] == 'string') {\r\n                        stmt += `${tColNames[0]} = '${row[0]}';`;\r\n                    }\r\n                    else {\r\n                        stmt += `${tColNames[0]} = ${row[0]};`;\r\n                    }\r\n                }\r\n            }\r\n            return stmt;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err.message}`);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param mDB\r\n     * @param values\r\n     * @param tbName\r\n     * @param tColNames\r\n     * @returns\r\n     */\r\n    checkUpdate(mDB, stmt, values, tbName, tColNames) {\r\n        const msg = 'CheckUpdate';\r\n        const isRun = true;\r\n        if (stmt.substring(0, 6) === 'UPDATE') {\r\n            try {\r\n                let query = `SELECT * FROM ${tbName} WHERE `;\r\n                if (typeof values[0] == 'string') {\r\n                    query += `${tColNames[0]} = '${values[0]}';`;\r\n                }\r\n                else {\r\n                    query += `${tColNames[0]} = ${values[0]};`;\r\n                }\r\n                const resQuery = this.getValues(mDB, query, tbName);\r\n                let resValues = [];\r\n                if (resQuery.length > 0) {\r\n                    resValues = resQuery[0];\r\n                }\r\n                if (values.length > 0 &&\r\n                    resValues.length > 0 &&\r\n                    values.length === resValues.length) {\r\n                    for (let i = 0; i < values.length; i++) {\r\n                        if (values[i] !== resValues[i]) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                else {\r\n                    const msg1 = 'Both arrays not the same length';\r\n                    throw new Error(`${msg} ${msg1}`);\r\n                }\r\n            }\r\n            catch (err) {\r\n                throw new Error(`${msg} ${err.message}`);\r\n            }\r\n        }\r\n        else {\r\n            return isRun;\r\n        }\r\n    }\r\n    /**\r\n     * GetValues\r\n     * @param mDb\r\n     * @param query\r\n     * @param tableName\r\n     */\r\n    getValues(mDb, query, tableName) {\r\n        const msg = 'GetValues';\r\n        const values = [];\r\n        try {\r\n            // get table column names and types\r\n            const tableNamesTypes = this.sqliteUtil.getTableColumnNamesTypes(mDb, tableName);\r\n            let rowNames = [];\r\n            if (Object.keys(tableNamesTypes).includes('names')) {\r\n                rowNames = tableNamesTypes.names;\r\n            }\r\n            else {\r\n                throw new Error(`${msg} Table ${tableName} no names`);\r\n            }\r\n            const retValues = this.sqliteUtil.queryAll(mDb, query, []);\r\n            for (const rValue of retValues) {\r\n                const row = [];\r\n                for (const rName of rowNames) {\r\n                    if (Object.keys(rValue).includes(rName)) {\r\n                        row.push(rValue[rName]);\r\n                    }\r\n                    else {\r\n                        row.push('NULL');\r\n                    }\r\n                }\r\n                values.push(row);\r\n            }\r\n            return values;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * CheckColumnTypes\r\n     * @param tableTypes\r\n     * @param rowValues\r\n     */\r\n    /*\r\n    private async checkColumnTypes(\r\n      tableTypes: any[],\r\n      rowValues: any[],\r\n    ): Promise<boolean> {\r\n      const isType = true;\r\n      for (let i = 0; i < rowValues.length; i++) {\r\n        if (rowValues[i].toString().toUpperCase() != 'NULL') {\r\n          try {\r\n            await this.isType(tableTypes[i], rowValues[i]);\r\n          } catch (err) {\r\n            return Promise.reject(new Error('checkColumnTypes: Type not found'));\r\n          }\r\n        }\r\n      }\r\n      return Promise.resolve(isType);\r\n    }\r\n  */\r\n    /**\r\n     * IsType\r\n     * @param type\r\n     * @param value\r\n     */\r\n    /*\r\n    private async isType(type: string, value: any): Promise<void> {\r\n      let ret = false;\r\n      if (type === 'NULL' && typeof value === 'object') ret = true;\r\n      if (type === 'TEXT' && typeof value === 'string') ret = true;\r\n      if (type === 'INTEGER' && typeof value === 'number') ret = true;\r\n      if (type === 'REAL' && typeof value === 'number') ret = true;\r\n      if (type === 'BLOB' && typeof value === 'string') ret = true;\r\n      if (ret) {\r\n        return Promise.resolve();\r\n      } else {\r\n        return Promise.reject(new Error('IsType: not a SQL Type'));\r\n      }\r\n    }\r\n  */\r\n    /**\r\n     * IsIdExists\r\n     * @param mDB\r\n     * @param dbName\r\n     * @param firstColumnName\r\n     * @param key\r\n     */\r\n    isIdExists(mDB, dbName, firstColumnName, key) {\r\n        const msg = 'IsIdExists';\r\n        let ret = false;\r\n        let query = `SELECT ${firstColumnName} FROM ` +\r\n            `${dbName} WHERE ${firstColumnName} = `;\r\n        if (typeof key === 'number')\r\n            query += `${key};`;\r\n        if (typeof key === 'string')\r\n            query += `'${key}';`;\r\n        try {\r\n            const resQuery = this.sqliteUtil.queryAll(mDB, query, []);\r\n            if (resQuery.length === 1)\r\n                ret = true;\r\n            return ret;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * CreateQuestionMarkString\r\n     * @param length\r\n     */\r\n    createQuestionMarkString(length) {\r\n        const msg = 'CreateQuestionMarkString';\r\n        let retString = '';\r\n        for (let i = 0; i < length; i++) {\r\n            retString += '?,';\r\n        }\r\n        if (retString.length > 1) {\r\n            retString = retString.slice(0, -1);\r\n            return retString;\r\n        }\r\n        else {\r\n            throw new Error(`${msg} length = 0`);\r\n        }\r\n    }\r\n    /**\r\n     * SetNameForUpdate\r\n     * @param names\r\n     */\r\n    setNameForUpdate(names) {\r\n        const msg = 'SetNameForUpdate';\r\n        let retString = '';\r\n        for (const name of names) {\r\n            retString += `${name} = ? ,`;\r\n        }\r\n        if (retString.length > 1) {\r\n            retString = retString.slice(0, -1);\r\n            return retString;\r\n        }\r\n        else {\r\n            throw new Error(`${msg} length = 0`);\r\n        }\r\n    }\r\n    /**\r\n     * IsJsonSQLite\r\n     * @param obj\r\n     */\r\n    isJsonSQLite(obj) {\r\n        const keyFirstLevel = [\r\n            'database',\r\n            'version',\r\n            'overwrite',\r\n            'encrypted',\r\n            'mode',\r\n            'tables',\r\n            'views',\r\n        ];\r\n        if (obj == null ||\r\n            (Object.keys(obj).length === 0 && obj.constructor === Object))\r\n            return false;\r\n        for (const key of Object.keys(obj)) {\r\n            if (keyFirstLevel.indexOf(key) === -1)\r\n                return false;\r\n            if (key === 'database' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'version' && typeof obj[key] != 'number')\r\n                return false;\r\n            if (key === 'overwrite' && typeof obj[key] != 'boolean')\r\n                return false;\r\n            if (key === 'encrypted' && typeof obj[key] != 'boolean')\r\n                return false;\r\n            if (key === 'mode' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'tables' && typeof obj[key] != 'object')\r\n                return false;\r\n            if (key === 'tables') {\r\n                for (const oKey of obj[key]) {\r\n                    const retTable = this.isTable(oKey);\r\n                    if (!retTable)\r\n                        return false;\r\n                }\r\n            }\r\n            if (key === 'views' && typeof obj[key] != 'object')\r\n                return false;\r\n            if (key === 'views') {\r\n                for (const oKey of obj[key]) {\r\n                    const retView = this.isView(oKey);\r\n                    if (!retView)\r\n                        return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * IsTable\r\n     * @param obj\r\n     */\r\n    isTable(obj) {\r\n        const keyTableLevel = [\r\n            'name',\r\n            'schema',\r\n            'indexes',\r\n            'triggers',\r\n            'values',\r\n        ];\r\n        let nbColumn = 0;\r\n        if (obj == null ||\r\n            (Object.keys(obj).length === 0 && obj.constructor === Object))\r\n            return false;\r\n        for (const key of Object.keys(obj)) {\r\n            if (keyTableLevel.indexOf(key) === -1)\r\n                return false;\r\n            if (key === 'name' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'schema' && typeof obj[key] != 'object')\r\n                return false;\r\n            if (key === 'indexes' && typeof obj[key] != 'object')\r\n                return false;\r\n            if (key === 'triggers' && typeof obj[key] != 'object')\r\n                return false;\r\n            if (key === 'values' && typeof obj[key] != 'object')\r\n                return false;\r\n            if (key === 'schema') {\r\n                obj['schema'].forEach((element) => {\r\n                    if (element.column) {\r\n                        nbColumn++;\r\n                    }\r\n                });\r\n                for (let i = 0; i < nbColumn; i++) {\r\n                    const retSchema = this.isSchema(obj[key][i]);\r\n                    if (!retSchema)\r\n                        return false;\r\n                }\r\n            }\r\n            if (key === 'indexes') {\r\n                for (const oKey of obj[key]) {\r\n                    const retIndexes = this.isIndexes(oKey);\r\n                    if (!retIndexes)\r\n                        return false;\r\n                }\r\n            }\r\n            if (key === 'triggers') {\r\n                for (const oKey of obj[key]) {\r\n                    const retTriggers = this.isTriggers(oKey);\r\n                    if (!retTriggers)\r\n                        return false;\r\n                }\r\n            }\r\n            if (key === 'values') {\r\n                if (nbColumn > 0) {\r\n                    for (const oKey of obj[key]) {\r\n                        if (typeof oKey != 'object' || oKey.length != nbColumn)\r\n                            return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * IsSchema\r\n     * @param obj\r\n     */\r\n    isSchema(obj) {\r\n        const keySchemaLevel = [\r\n            'column',\r\n            'value',\r\n            'foreignkey',\r\n            'primarykey',\r\n            'constraint',\r\n        ];\r\n        if (obj == null ||\r\n            (Object.keys(obj).length === 0 && obj.constructor === Object))\r\n            return false;\r\n        for (const key of Object.keys(obj)) {\r\n            if (keySchemaLevel.indexOf(key) === -1)\r\n                return false;\r\n            if (key === 'column' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'value' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'foreignkey' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'primarykey' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'constraint' && typeof obj[key] != 'string')\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * isIndexes\r\n     * @param obj\r\n     */\r\n    isIndexes(obj) {\r\n        const keyIndexesLevel = ['name', 'value', 'mode'];\r\n        if (obj == null ||\r\n            (Object.keys(obj).length === 0 && obj.constructor === Object))\r\n            return false;\r\n        for (const key of Object.keys(obj)) {\r\n            if (keyIndexesLevel.indexOf(key) === -1)\r\n                return false;\r\n            if (key === 'name' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'value' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'mode' &&\r\n                (typeof obj[key] != 'string' || obj[key].toUpperCase() != 'UNIQUE'))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * isTriggers\r\n     * @param obj\r\n     */\r\n    isTriggers(obj) {\r\n        const keyTriggersLevel = [\r\n            'name',\r\n            'timeevent',\r\n            'condition',\r\n            'logic',\r\n        ];\r\n        if (obj == null ||\r\n            (Object.keys(obj).length === 0 && obj.constructor === Object))\r\n            return false;\r\n        for (const key of Object.keys(obj)) {\r\n            if (keyTriggersLevel.indexOf(key) === -1)\r\n                return false;\r\n            if (key === 'name' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'timeevent' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'condition' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'logic' && typeof obj[key] != 'string')\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * IsViews\r\n     * @param obj\r\n     */\r\n    isView(obj) {\r\n        const keyViewLevel = ['name', 'value'];\r\n        if (obj == null ||\r\n            (Object.keys(obj).length === 0 && obj.constructor === Object))\r\n            return false;\r\n        for (const key of Object.keys(obj)) {\r\n            if (keyViewLevel.indexOf(key) === -1)\r\n                return false;\r\n            if (key === 'name' && typeof obj[key] != 'string')\r\n                return false;\r\n            if (key === 'value' && typeof obj[key] != 'string')\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * checkSchemaValidity\r\n     * @param schema\r\n     */\r\n    checkSchemaValidity(schema) {\r\n        const msg = 'CheckSchemaValidity';\r\n        for (let i = 0; i < schema.length; i++) {\r\n            const sch = {};\r\n            const keys = Object.keys(schema[i]);\r\n            if (keys.includes('column')) {\r\n                sch.column = schema[i].column;\r\n            }\r\n            if (keys.includes('value')) {\r\n                sch.value = schema[i].value;\r\n            }\r\n            if (keys.includes('foreignkey')) {\r\n                sch.foreignkey = schema[i].foreignkey;\r\n            }\r\n            if (keys.includes('constraint')) {\r\n                sch.constraint = schema[i].constraint;\r\n            }\r\n            const isValid = this.isSchema(sch);\r\n            if (!isValid) {\r\n                throw new Error(`${msg} schema[${i}] not valid`);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * checkIndexesSchemaValidity\r\n     * @param indexes\r\n     */\r\n    checkIndexesValidity(indexes) {\r\n        const msg = 'CheckIndexesValidity';\r\n        for (let i = 0; i < indexes.length; i++) {\r\n            const index = {};\r\n            const keys = Object.keys(indexes[i]);\r\n            if (keys.includes('value')) {\r\n                index.value = indexes[i].value;\r\n            }\r\n            if (keys.includes('name')) {\r\n                index.name = indexes[i].name;\r\n            }\r\n            if (keys.includes('mode')) {\r\n                index.mode = indexes[i].mode;\r\n            }\r\n            const isValid = this.isIndexes(index);\r\n            if (!isValid) {\r\n                throw new Error(`${msg} indexes[${i}] not valid`);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * checkTriggersValidity\r\n     * @param triggers\r\n     */\r\n    checkTriggersValidity(triggers) {\r\n        const msg = 'CheckTriggersValidity';\r\n        for (let i = 0; i < triggers.length; i++) {\r\n            const trigger = {};\r\n            const keys = Object.keys(triggers[i]);\r\n            if (keys.includes('logic')) {\r\n                trigger.logic = triggers[i].logic;\r\n            }\r\n            if (keys.includes('name')) {\r\n                trigger.name = triggers[i].name;\r\n            }\r\n            if (keys.includes('timeevent')) {\r\n                trigger.timeevent = triggers[i].timeevent;\r\n            }\r\n            if (keys.includes('condition')) {\r\n                trigger.condition = triggers[i].condition;\r\n            }\r\n            const isValid = this.isTriggers(trigger);\r\n            if (!isValid) {\r\n                throw new Error(`${msg} triggers[${i}] not valid`);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * checkViewsValidity\r\n     * @param views\r\n     */\r\n    checkViewsValidity(views) {\r\n        const msg = 'CheckViewsValidity';\r\n        for (let i = 0; i < views.length; i++) {\r\n            const view = {};\r\n            const keys = Object.keys(views[i]);\r\n            if (keys.includes('value')) {\r\n                view.value = views[i].value;\r\n            }\r\n            if (keys.includes('name')) {\r\n                view.name = views[i].name;\r\n            }\r\n            const isValid = this.isView(view);\r\n            if (!isValid) {\r\n                throw new Error(`${msg} views[${i}] not valid`);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * CreateView\r\n     * @param mDB\r\n     * @param table\r\n     */\r\n    createView(mDB, view) {\r\n        const msg = 'CreateView';\r\n        const stmt = `CREATE VIEW IF NOT EXISTS ${view.name} AS ${view.value};`;\r\n        try {\r\n            const results = this.sqliteUtil.execute(mDB, stmt, true);\r\n            if (results.changes < 0) {\r\n                throw new Error(`${msg} ${view.name} failed`);\r\n            }\r\n            return results;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n}\r\nexports.UtilsJson = UtilsJson;\r\n//# sourceMappingURL=utilsJson.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ExportToJson = void 0;\r\nconst utilsSQLite_1 = require(\"../utilsSQLite\");\r\nconst utilsJson_1 = require(\"./utilsJson\");\r\nclass ExportToJson {\r\n    constructor() {\r\n        this.sqliteUtil = new utilsSQLite_1.UtilsSQLite();\r\n        this.jsonUtil = new utilsJson_1.UtilsJson();\r\n    }\r\n    /**\r\n     * CreateExportObject\r\n     * @param mDB\r\n     * @param sqlObj\r\n     */\r\n    createExportObject(mDB, sqlObj) {\r\n        const msg = 'CreateExportObject';\r\n        const retObj = {};\r\n        let tables = [];\r\n        let views = [];\r\n        let errmsg = '';\r\n        try {\r\n            // get View's name\r\n            views = this.getViewsName(mDB);\r\n            // get Table's name\r\n            const resTables = this.getTablesNameSQL(mDB);\r\n            if (resTables.length === 0) {\r\n                throw new Error(`${msg} table's names failed`);\r\n            }\r\n            else {\r\n                const isTable = this.jsonUtil.isTableExists(mDB, true, 'sync_table');\r\n                if (!isTable && sqlObj.mode === 'partial') {\r\n                    throw new Error(`${msg} No sync_table available`);\r\n                }\r\n                switch (sqlObj.mode) {\r\n                    case 'partial': {\r\n                        tables = this.getTablesPartial(mDB, resTables);\r\n                        break;\r\n                    }\r\n                    case 'full': {\r\n                        tables = this.getTablesFull(mDB, resTables);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        errmsg = `${msg} expMode ${sqlObj.mode} not defined`;\r\n                        break;\r\n                    }\r\n                }\r\n                if (errmsg.length > 0) {\r\n                    throw new Error(errmsg);\r\n                }\r\n                if (tables.length > 0) {\r\n                    retObj.database = sqlObj.database;\r\n                    retObj.version = sqlObj.version;\r\n                    retObj.encrypted = sqlObj.encrypted;\r\n                    retObj.mode = sqlObj.mode;\r\n                    retObj.tables = tables;\r\n                    if (views.length > 0) {\r\n                        retObj.views = views;\r\n                    }\r\n                }\r\n                return retObj;\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetTablesNameSQL\r\n     * @param mDb\r\n     */\r\n    getTablesNameSQL(mDb) {\r\n        const msg = 'GetTablesNameSQL';\r\n        let sql = 'SELECT name,sql FROM sqlite_master WHERE ';\r\n        sql += \"type='table' AND name NOT LIKE 'sync_table' \";\r\n        sql += \"AND name NOT LIKE '_temp_%' \";\r\n        sql += \"AND name NOT LIKE 'sqlite_%';\";\r\n        let retQuery = [];\r\n        try {\r\n            retQuery = this.sqliteUtil.queryAll(mDb, sql, []);\r\n            return retQuery;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    getLastExportDate(mDb) {\r\n        const msg = 'GetLastExportDate';\r\n        let retDate = -1;\r\n        try {\r\n            // get the last sync date\r\n            const stmt = `SELECT sync_date FROM sync_table WHERE id = ?;`;\r\n            const row = this.sqliteUtil.queryOne(mDb, stmt, [2]);\r\n            if (row != null) {\r\n                const key = Object.keys(row)[0];\r\n                retDate = row[key];\r\n            }\r\n            return retDate;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * SetLastExportDate\r\n     * @param mDb\r\n     * @param lastExportedDate\r\n     * @returns\r\n     */\r\n    setLastExportDate(mDb, lastExportedDate) {\r\n        const msg = 'SetLastExportDate';\r\n        try {\r\n            const isTable = this.jsonUtil.isTableExists(mDb, true, 'sync_table');\r\n            if (!isTable) {\r\n                throw new Error(`${msg} No sync_table available`);\r\n            }\r\n            const sDate = Math.round(new Date(lastExportedDate).getTime() / 1000);\r\n            let stmt = '';\r\n            if (this.getLastExportDate(mDb) > 0) {\r\n                stmt = `UPDATE sync_table SET sync_date = ${sDate} WHERE id = 2;`;\r\n            }\r\n            else {\r\n                stmt = `INSERT INTO sync_table (sync_date) VALUES (${sDate});`;\r\n            }\r\n            const results = this.sqliteUtil.execute(mDb, stmt, false);\r\n            if (results.changes < 0) {\r\n                return { result: false, message: `${msg} failed` };\r\n            }\r\n            else {\r\n                return { result: true };\r\n            }\r\n        }\r\n        catch (err) {\r\n            return {\r\n                result: false,\r\n                message: `${msg} ${err.message}`,\r\n            };\r\n        }\r\n    }\r\n    delExportedRows(mDb) {\r\n        const msg = 'DelExportedRows';\r\n        let lastExportDate;\r\n        try {\r\n            // check if synchronization table exists\r\n            const isTable = this.jsonUtil.isTableExists(mDb, true, 'sync_table');\r\n            if (!isTable) {\r\n                throw new Error(`${msg} No sync_table available`);\r\n            }\r\n            // get the last export date\r\n            lastExportDate = this.getLastExportDate(mDb);\r\n            if (lastExportDate < 0) {\r\n                throw new Error(`${msg} no last exported date available`);\r\n            }\r\n            // get the table' name list\r\n            const resTables = this.sqliteUtil.getTablesNames(mDb);\r\n            if (resTables.length === 0) {\r\n                throw new Error(`${msg} No table's names returned`);\r\n            }\r\n            // Loop through the tables\r\n            for (const table of resTables) {\r\n                // define the delete statement\r\n                const delStmt = `DELETE FROM ${table}\r\n              WHERE sql_deleted = 1 AND last_modified < ${lastExportDate};`;\r\n                const results = this.sqliteUtil.prepareRun(mDb, delStmt, [], true, 'no');\r\n                if (results.lastId < 0) {\r\n                    throw new Error(`${msg} lastId < 0`);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} failed: ${err.message}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetViewsNameSQL\r\n     * @param mDb\r\n     */\r\n    getViewsName(mDb) {\r\n        const views = [];\r\n        let sql = 'SELECT name,sql FROM sqlite_master WHERE ';\r\n        sql += \"type='view' AND name NOT LIKE 'sqlite_%';\";\r\n        let retQuery = [];\r\n        try {\r\n            retQuery = this.sqliteUtil.queryAll(mDb, sql, []);\r\n            for (const query of retQuery) {\r\n                const view = {};\r\n                view.name = query.name;\r\n                view.value = query.sql.substring(query.sql.indexOf('AS ') + 3);\r\n                views.push(view);\r\n            }\r\n            return views;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`getViewsName: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetSyncDate\r\n     * @param mDb\r\n     */\r\n    getSyncDate(mDb) {\r\n        const msg = 'GetSyncDate';\r\n        let retDate = -1;\r\n        // get the last sync date\r\n        const stmt = `SELECT sync_date FROM sync_table WHERE id = ?;`;\r\n        const row = this.sqliteUtil.queryOne(mDb, stmt, [1]);\r\n        if (row != null) {\r\n            const key = Object.keys(row)[0];\r\n            retDate = row[key];\r\n            return retDate;\r\n        }\r\n        else {\r\n            throw new Error(`${msg} no syncDate`);\r\n        }\r\n    }\r\n    /**\r\n     * GetTablesFull\r\n     * @param mDb\r\n     * @param resTables\r\n     */\r\n    getTablesFull(mDb, resTables) {\r\n        const msg = 'GetTablesFull';\r\n        const tables = [];\r\n        let errmsg = '';\r\n        try {\r\n            // Loop through the tables\r\n            for (const rTable of resTables) {\r\n                let tableName;\r\n                let sqlStmt;\r\n                if (rTable.name) {\r\n                    tableName = rTable.name;\r\n                }\r\n                else {\r\n                    errmsg = `${msg} no name`;\r\n                    break;\r\n                }\r\n                if (rTable.sql) {\r\n                    sqlStmt = rTable.sql;\r\n                }\r\n                else {\r\n                    errmsg = `${msg} no sql`;\r\n                    break;\r\n                }\r\n                const table = {};\r\n                // create Table's Schema\r\n                const schema = this.getSchema(sqlStmt);\r\n                if (schema.length === 0) {\r\n                    errmsg = `${msg} no Schema returned`;\r\n                    break;\r\n                }\r\n                // check schema validity\r\n                this.jsonUtil.checkSchemaValidity(schema);\r\n                // create Table's indexes if any\r\n                const indexes = this.getIndexes(mDb, tableName);\r\n                if (indexes.length > 0) {\r\n                    // check indexes validity\r\n                    this.jsonUtil.checkIndexesValidity(indexes);\r\n                }\r\n                // create Table's triggers if any\r\n                const triggers = this.getTriggers(mDb, tableName);\r\n                if (triggers.length > 0) {\r\n                    // check triggers validity\r\n                    this.jsonUtil.checkTriggersValidity(triggers);\r\n                }\r\n                // create Table's Data\r\n                const query = `SELECT * FROM ${tableName};`;\r\n                const values = this.jsonUtil.getValues(mDb, query, tableName);\r\n                table.name = tableName;\r\n                if (schema.length > 0) {\r\n                    table.schema = schema;\r\n                }\r\n                else {\r\n                    errmsg = `${msg} must contain schema`;\r\n                    break;\r\n                }\r\n                if (indexes.length > 0) {\r\n                    table.indexes = indexes;\r\n                }\r\n                if (triggers.length > 0) {\r\n                    table.triggers = triggers;\r\n                }\r\n                if (values.length > 0) {\r\n                    table.values = values;\r\n                }\r\n                if (Object.keys(table).length <= 1) {\r\n                    errmsg = `${msg} table ${tableName} is not a jsonTable`;\r\n                    break;\r\n                }\r\n                tables.push(table);\r\n            }\r\n            if (errmsg.length > 0) {\r\n                throw new Error(errmsg);\r\n            }\r\n            return tables;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetSchema\r\n     * @param mDb\r\n     * @param sqlStmt\r\n     * @param tableName\r\n     */\r\n    getSchema(sqlStmt /*,tableName: string,*/) {\r\n        const msg = 'GetSchema';\r\n        const schema = [];\r\n        // take the substring between parenthesis\r\n        const openPar = sqlStmt.indexOf('(');\r\n        const closePar = sqlStmt.lastIndexOf(')');\r\n        let sstr = sqlStmt.substring(openPar + 1, closePar);\r\n        // check if there is other parenthesis and replace the ',' by '§'\r\n        try {\r\n            sstr = this.modEmbeddedParentheses(sstr);\r\n            const sch = sstr.split(',');\r\n            // for each element of the array split the\r\n            // first word as key\r\n            for (const sc of sch) {\r\n                const row = [];\r\n                const scht = sc.replace(/\\n/g, '').trim();\r\n                row[0] = scht.substring(0, scht.indexOf(' '));\r\n                row[1] = scht.substring(scht.indexOf(' ') + 1);\r\n                const jsonRow = {};\r\n                if (row[0].toUpperCase() === 'FOREIGN') {\r\n                    const oPar = scht.indexOf('(');\r\n                    const cPar = scht.indexOf(')');\r\n                    const fk = scht.substring(oPar + 1, cPar);\r\n                    const fknames = fk.split('§');\r\n                    row[0] = fknames.join(',');\r\n                    row[0] = row[0].replace(/, /g, ',');\r\n                    row[1] = scht.substring(cPar + 2);\r\n                    jsonRow['foreignkey'] = row[0];\r\n                }\r\n                else if (row[0].toUpperCase() === 'PRIMARY') {\r\n                    const oPar = scht.indexOf('(');\r\n                    const cPar = scht.indexOf(')');\r\n                    const pk = scht.substring(oPar + 1, cPar);\r\n                    const pknames = pk.split('§');\r\n                    row[0] = 'CPK_' + pknames.join('_');\r\n                    row[0] = row[0].replace(/_ /g, '_');\r\n                    row[1] = scht;\r\n                    jsonRow['constraint'] = row[0];\r\n                }\r\n                else if (row[0].toUpperCase() === 'CONSTRAINT') {\r\n                    const tRow = [];\r\n                    const row1t = row[1].trim();\r\n                    tRow[0] = row1t.substring(0, row1t.indexOf(' '));\r\n                    tRow[1] = row1t.substring(row1t.indexOf(' ') + 1);\r\n                    row[0] = tRow[0];\r\n                    jsonRow['constraint'] = row[0];\r\n                    row[1] = tRow[1];\r\n                }\r\n                else {\r\n                    jsonRow['column'] = row[0];\r\n                }\r\n                jsonRow['value'] = row[1].replace(/§/g, ',');\r\n                schema.push(jsonRow);\r\n            }\r\n            return schema;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetIndexes\r\n     * @param mDb\r\n     * @param sqlStmt\r\n     * @param tableName\r\n     */\r\n    getIndexes(mDb, tableName) {\r\n        const msg = 'GetIndexes';\r\n        const indexes = [];\r\n        let errmsg = '';\r\n        try {\r\n            let stmt = 'SELECT name,tbl_name,sql FROM sqlite_master WHERE ';\r\n            stmt += `type = 'index' AND tbl_name = '${tableName}' `;\r\n            stmt += `AND sql NOTNULL;`;\r\n            const retIndexes = this.sqliteUtil.queryAll(mDb, stmt, []);\r\n            if (retIndexes.length > 0) {\r\n                for (const rIndex of retIndexes) {\r\n                    const keys = Object.keys(rIndex);\r\n                    if (keys.length === 3) {\r\n                        if (rIndex['tbl_name'] === tableName) {\r\n                            const sql = rIndex['sql'];\r\n                            const mode = sql.includes('UNIQUE') ? 'UNIQUE' : '';\r\n                            const oPar = sql.lastIndexOf('(');\r\n                            const cPar = sql.lastIndexOf(')');\r\n                            const index = {};\r\n                            index.name = rIndex['name'];\r\n                            index.value = sql.slice(oPar + 1, cPar);\r\n                            if (mode.length > 0)\r\n                                index.mode = mode;\r\n                            indexes.push(index);\r\n                        }\r\n                        else {\r\n                            errmsg = `${msg} Table ${tableName} doesn't match`;\r\n                            break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        errmsg = `${msg} Table ${tableName} creating indexes`;\r\n                        break;\r\n                    }\r\n                }\r\n                if (errmsg.length > 0) {\r\n                    throw new Error(errmsg);\r\n                }\r\n            }\r\n            return indexes;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetTriggers\r\n     * @param mDb\r\n     * @param sqlStmt\r\n     * @param tableName\r\n     */\r\n    getTriggers(mDb, tableName) {\r\n        const msg = 'GetTriggers';\r\n        const triggers = [];\r\n        try {\r\n            let stmt = 'SELECT name,tbl_name,sql FROM sqlite_master WHERE ';\r\n            stmt += `type = 'trigger' AND tbl_name = '${tableName}' `;\r\n            stmt += `AND sql NOT NULL;`;\r\n            const retTriggers = this.sqliteUtil.queryAll(mDb, stmt, []);\r\n            if (retTriggers.length > 0) {\r\n                for (const rTrg of retTriggers) {\r\n                    const keys = Object.keys(rTrg);\r\n                    if (keys.length === 3) {\r\n                        if (rTrg['tbl_name'] === tableName) {\r\n                            const sql = rTrg['sql'];\r\n                            const name = rTrg['name'];\r\n                            let sqlArr = sql.split(name);\r\n                            if (sqlArr.length != 2) {\r\n                                throw new Error(`${msg} sql split name does not return 2 values`);\r\n                            }\r\n                            if (!sqlArr[1].includes(tableName)) {\r\n                                throw new Error(`${msg} sql split does not contains ${tableName}`);\r\n                            }\r\n                            const timeEvent = sqlArr[1].split(tableName, 1)[0].trim();\r\n                            sqlArr = sqlArr[1].split(timeEvent + ' ' + tableName);\r\n                            if (sqlArr.length != 2) {\r\n                                throw new Error(`${msg} sql split tableName does not return 2 values`);\r\n                            }\r\n                            let condition = '';\r\n                            let logic = '';\r\n                            if (sqlArr[1].trim().substring(0, 5).toUpperCase() !== 'BEGIN') {\r\n                                sqlArr = sqlArr[1].trim().split('BEGIN');\r\n                                if (sqlArr.length != 2) {\r\n                                    throw new Error(`${msg} sql split BEGIN does not return 2 values`);\r\n                                }\r\n                                condition = sqlArr[0].trim();\r\n                                logic = 'BEGIN' + sqlArr[1];\r\n                            }\r\n                            else {\r\n                                logic = sqlArr[1].trim();\r\n                            }\r\n                            const trigger = {};\r\n                            trigger.name = name;\r\n                            trigger.logic = logic;\r\n                            if (condition.length > 0)\r\n                                trigger.condition = condition;\r\n                            trigger.timeevent = timeEvent;\r\n                            triggers.push(trigger);\r\n                        }\r\n                        else {\r\n                            throw new Error(`${msg} Table ${tableName} doesn't match`);\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new Error(`${msg} Table ${tableName} creating indexes`);\r\n                    }\r\n                }\r\n            }\r\n            return triggers;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetTablesPartial\r\n     * @param mDb\r\n     * @param resTables\r\n     */\r\n    getTablesPartial(mDb, resTables) {\r\n        const msg = 'GetTablesPartial';\r\n        const tables = [];\r\n        let modTables = {};\r\n        let syncDate = 0;\r\n        let modTablesKeys = [];\r\n        let errmsg = '';\r\n        try {\r\n            // Get the syncDate and the Modified Tables\r\n            const partialModeData = this.getPartialModeData(mDb, resTables);\r\n            if (Object.keys(partialModeData).includes('syncDate')) {\r\n                syncDate = partialModeData.syncDate;\r\n            }\r\n            if (Object.keys(partialModeData).includes('modTables')) {\r\n                modTables = partialModeData.modTables;\r\n                modTablesKeys = Object.keys(modTables);\r\n            }\r\n            // Loop trough tables\r\n            for (const rTable of resTables) {\r\n                let tableName = '';\r\n                let sqlStmt = '';\r\n                if (rTable.name) {\r\n                    tableName = rTable.name;\r\n                }\r\n                else {\r\n                    errmsg = `${msg} no name`;\r\n                    break;\r\n                }\r\n                if (rTable.sql) {\r\n                    sqlStmt = rTable.sql;\r\n                }\r\n                else {\r\n                    errmsg = `${msg} no sql`;\r\n                    break;\r\n                }\r\n                if (modTablesKeys.length == 0 ||\r\n                    modTablesKeys.indexOf(tableName) === -1 ||\r\n                    modTables[tableName] == 'No') {\r\n                    continue;\r\n                }\r\n                const table = {};\r\n                let schema = [];\r\n                let indexes = [];\r\n                let triggers = [];\r\n                table.name = rTable;\r\n                if (modTables[table.name] === 'Create') {\r\n                    // create Table's Schema\r\n                    schema = this.getSchema(sqlStmt);\r\n                    if (schema.length > 0) {\r\n                        // check schema validity\r\n                        this.jsonUtil.checkSchemaValidity(schema);\r\n                    }\r\n                    // create Table's indexes if any\r\n                    indexes = this.getIndexes(mDb, tableName);\r\n                    if (indexes.length > 0) {\r\n                        // check indexes validity\r\n                        this.jsonUtil.checkIndexesValidity(indexes);\r\n                    }\r\n                    // create Table's triggers if any\r\n                    triggers = this.getTriggers(mDb, tableName);\r\n                    if (triggers.length > 0) {\r\n                        // check triggers validity\r\n                        this.jsonUtil.checkTriggersValidity(triggers);\r\n                    }\r\n                }\r\n                // create Table's Data\r\n                let query = '';\r\n                if (modTables[tableName] === 'Create') {\r\n                    query = `SELECT * FROM ${tableName};`;\r\n                }\r\n                else {\r\n                    query =\r\n                        `SELECT * FROM ${tableName} ` +\r\n                            `WHERE last_modified > ${syncDate};`;\r\n                }\r\n                const values = this.jsonUtil.getValues(mDb, query, tableName);\r\n                // check the table object validity\r\n                table.name = tableName;\r\n                if (schema.length > 0) {\r\n                    table.schema = schema;\r\n                }\r\n                if (indexes.length > 0) {\r\n                    table.indexes = indexes;\r\n                }\r\n                if (triggers.length > 0) {\r\n                    table.triggers = triggers;\r\n                }\r\n                if (values.length > 0) {\r\n                    table.values = values;\r\n                }\r\n                if (Object.keys(table).length <= 1) {\r\n                    errmsg = `${msg} table ${tableName} is not a jsonTable`;\r\n                    break;\r\n                }\r\n                tables.push(table);\r\n            }\r\n            if (errmsg.length > 0) {\r\n                throw new Error(errmsg);\r\n            }\r\n            return tables;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetPartialModeData\r\n     * @param mDb\r\n     * @param resTables\r\n     */\r\n    getPartialModeData(mDb, resTables) {\r\n        const msg = 'GetPartialModeData';\r\n        const retData = {};\r\n        try {\r\n            // get the synchronization date\r\n            const syncDate = this.getSyncDate(mDb);\r\n            if (syncDate <= 0) {\r\n                throw new Error(`${msg} no syncDate`);\r\n            }\r\n            // get the tables which have been updated\r\n            // since last synchronization\r\n            const modTables = this.getTablesModified(mDb, resTables, syncDate);\r\n            if (modTables.length <= 0) {\r\n                throw new Error(`${msg} no modTables`);\r\n            }\r\n            retData.syncDate = syncDate;\r\n            retData.modTables = modTables;\r\n            return retData;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    getTablesModified(mDb, tables, syncDate) {\r\n        const msg = 'GetTablesModified';\r\n        let errmsg = '';\r\n        try {\r\n            const retModified = {};\r\n            for (const rTable of tables) {\r\n                let mode;\r\n                // get total count of the table\r\n                let stmt = 'SELECT count(*) AS tcount  ';\r\n                stmt += `FROM ${rTable.name};`;\r\n                let retQuery = this.sqliteUtil.queryAll(mDb, stmt, []);\r\n                if (retQuery.length != 1) {\r\n                    errmsg = `${msg} total count not returned`;\r\n                    break;\r\n                }\r\n                const totalCount = retQuery[0]['tcount'];\r\n                // get total count of modified since last sync\r\n                stmt = 'SELECT count(*) AS mcount FROM ';\r\n                stmt += `${rTable.name} WHERE last_modified > `;\r\n                stmt += `${syncDate};`;\r\n                retQuery = this.sqliteUtil.queryAll(mDb, stmt, []);\r\n                if (retQuery.length != 1)\r\n                    break;\r\n                const totalModifiedCount = retQuery[0]['mcount'];\r\n                if (totalModifiedCount === 0) {\r\n                    mode = 'No';\r\n                }\r\n                else if (totalCount === totalModifiedCount) {\r\n                    mode = 'Create';\r\n                }\r\n                else {\r\n                    mode = 'Modified';\r\n                }\r\n                const key = rTable.name;\r\n                retModified[key] = mode;\r\n            }\r\n            if (errmsg.length > 0) {\r\n                throw new Error(errmsg);\r\n            }\r\n            return retModified;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n    }\r\n    modEmbeddedParentheses(sstr) {\r\n        const msg = 'ModEmbeddedParentheses';\r\n        const oParArray = this.indexOfChar(sstr, '(');\r\n        const cParArray = this.indexOfChar(sstr, ')');\r\n        if (oParArray.length != cParArray.length) {\r\n            throw new Error(`${msg} Not same number of '(' & ')'`);\r\n        }\r\n        if (oParArray.length === 0) {\r\n            return sstr;\r\n        }\r\n        let resStmt = sstr.substring(0, oParArray[0] - 1);\r\n        for (let i = 0; i < oParArray.length; i++) {\r\n            let str;\r\n            if (i < oParArray.length - 1) {\r\n                if (oParArray[i + 1] < cParArray[i]) {\r\n                    str = sstr.substring(oParArray[i] - 1, cParArray[i + 1]);\r\n                    i++;\r\n                }\r\n                else {\r\n                    str = sstr.substring(oParArray[i] - 1, cParArray[i]);\r\n                }\r\n            }\r\n            else {\r\n                str = sstr.substring(oParArray[i] - 1, cParArray[i]);\r\n            }\r\n            const newS = str.replace(/,/g, '§');\r\n            resStmt += newS;\r\n            if (i < oParArray.length - 1) {\r\n                resStmt += sstr.substring(cParArray[i], oParArray[i + 1] - 1);\r\n            }\r\n        }\r\n        resStmt += sstr.substring(cParArray[cParArray.length - 1], sstr.length);\r\n        return resStmt;\r\n    }\r\n    indexOfChar(str, char) {\r\n        const tmpArr = [...str];\r\n        char = char.toLowerCase();\r\n        return tmpArr.reduce((results, elem, idx) => elem.toLowerCase() === char ? [...results, idx] : results, []);\r\n    }\r\n}\r\nexports.ExportToJson = ExportToJson;\r\n//# sourceMappingURL=exportToJson.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsDrop = void 0;\r\nconst utilsSQLite_1 = require(\"./utilsSQLite\");\r\nclass UtilsDrop {\r\n    constructor() {\r\n        this.sqliteUtil = new utilsSQLite_1.UtilsSQLite();\r\n    }\r\n    /**\r\n     * DropElements\r\n     * @param db\r\n     * @param type [\"table\",\"index\",\"trigger\"]\r\n     */\r\n    dropElements(db, type) {\r\n        let msg = '';\r\n        let stmt1 = `AND name NOT LIKE ('sqlite_%')`;\r\n        switch (type) {\r\n            case 'index':\r\n                msg = 'DropIndexes';\r\n                break;\r\n            case 'trigger':\r\n                msg = 'DropTriggers';\r\n                break;\r\n            case 'table':\r\n                msg = 'DropTables';\r\n                stmt1 += ` AND name NOT IN ('sync_table')`;\r\n                break;\r\n            case 'view':\r\n                msg = 'DropViews';\r\n                break;\r\n            default:\r\n                throw new Error(`DropElements: ${type} ` + 'not found');\r\n        }\r\n        // get the element's names\r\n        let stmt = 'SELECT name FROM sqlite_master WHERE ';\r\n        stmt += `type = '${type}' ${stmt1};`;\r\n        try {\r\n            const elements = this.sqliteUtil.queryAll(db, stmt, []);\r\n            if (elements.length > 0) {\r\n                const upType = type.toUpperCase();\r\n                const statements = [];\r\n                for (const elem of elements) {\r\n                    let stmt = `DROP ${upType} IF EXISTS `;\r\n                    stmt += `${elem.name};`;\r\n                    statements.push(stmt);\r\n                }\r\n                for (const stmt of statements) {\r\n                    const results = this.sqliteUtil.prepareRun(db, stmt, [], false, 'no');\r\n                    if (results.lastId < 0) {\r\n                        throw new Error(`${msg}: lastId < 0`);\r\n                    }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg}: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * DropAll\r\n     * Drop all database's elements\r\n     * @param db\r\n     */\r\n    dropAll(db) {\r\n        try {\r\n            // drop tables\r\n            this.dropElements(db, 'table');\r\n            // drop indexes\r\n            this.dropElements(db, 'index');\r\n            // drop triggers\r\n            this.dropElements(db, 'trigger');\r\n            // drop views\r\n            this.dropElements(db, 'view');\r\n            // vacuum the database\r\n            this.sqliteUtil.prepareRun(db, 'VACUUM;', [], false, 'no');\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`DropAll: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * DropTempTables\r\n     * @param db\r\n     * @param alterTables\r\n     */\r\n    dropTempTables(db, alterTables) {\r\n        const tempTables = Object.keys(alterTables);\r\n        const statements = [];\r\n        for (const tTable of tempTables) {\r\n            let stmt = 'DROP TABLE IF EXISTS ';\r\n            stmt += `_temp_${tTable};`;\r\n            statements.push(stmt);\r\n        }\r\n        try {\r\n            const results = this.sqliteUtil.execute(db, statements.join('\\n'), false);\r\n            if (results.changes < 0) {\r\n                throw new Error('DropTempTables: changes < 0');\r\n            }\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`DropTempTables: ${err}`);\r\n        }\r\n    }\r\n}\r\nexports.UtilsDrop = UtilsDrop;\r\n//# sourceMappingURL=utilsDrop.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ImportFromJson = void 0;\r\nconst utilsDrop_1 = require(\"../utilsDrop\");\r\nconst utilsSQLite_1 = require(\"../utilsSQLite\");\r\nconst utilsJson_1 = require(\"./utilsJson\");\r\nclass ImportFromJson {\r\n    constructor() {\r\n        this.jsonUtil = new utilsJson_1.UtilsJson();\r\n        this.sqliteUtil = new utilsSQLite_1.UtilsSQLite();\r\n        this.dropUtil = new utilsDrop_1.UtilsDrop();\r\n    }\r\n    /**\r\n     * CreateDatabaseSchema\r\n     * @param mDB\r\n     * @param jsonData\r\n     */\r\n    createDatabaseSchema(mDB, jsonData) {\r\n        let changes = -1;\r\n        const version = jsonData.version;\r\n        try {\r\n            // set User Version PRAGMA\r\n            this.sqliteUtil.setVersion(mDB, version);\r\n            // DROP ALL when mode=\"full\"\r\n            if (jsonData.mode === 'full') {\r\n                this.dropUtil.dropAll(mDB);\r\n            }\r\n            // create database schema\r\n            changes = this.jsonUtil.createSchema(mDB, jsonData);\r\n            return changes;\r\n        }\r\n        catch (err) {\r\n            throw new Error('CreateDatabaseSchema: ' + `${err}`);\r\n        }\r\n    }\r\n    createTablesData(mDB, jsonData) {\r\n        const msg = 'CreateTablesData';\r\n        let results;\r\n        let isValue = false;\r\n        let message = '';\r\n        try {\r\n            // start a transaction\r\n            this.sqliteUtil.beginTransaction(mDB, true);\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n        for (const jTable of jsonData.tables) {\r\n            if (jTable.values != null && jTable.values.length >= 1) {\r\n                // Create the table's data\r\n                try {\r\n                    results = this.jsonUtil.createDataTable(mDB, jTable, jsonData.mode);\r\n                    if (results.lastId < 0)\r\n                        break;\r\n                    isValue = true;\r\n                }\r\n                catch (err) {\r\n                    message = err;\r\n                    isValue = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (isValue) {\r\n            try {\r\n                this.sqliteUtil.commitTransaction(mDB, true);\r\n                return results.changes;\r\n            }\r\n            catch (err) {\r\n                throw new Error(`${msg} ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            if (message.length > 0) {\r\n                try {\r\n                    this.sqliteUtil.rollbackTransaction(mDB, true);\r\n                    throw new Error(`${msg} ${message}`);\r\n                }\r\n                catch (err) {\r\n                    throw new Error(`${msg} ${err}: ${message}`);\r\n                }\r\n            }\r\n            else {\r\n                // case were no values given\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * CreateViews\r\n     * @param mDB\r\n     * @param jsonData\r\n     */\r\n    createViews(mDB, jsonData) {\r\n        const msg = 'CreateViews';\r\n        let isView = false;\r\n        let message = '';\r\n        let results;\r\n        try {\r\n            // start a transaction\r\n            this.sqliteUtil.beginTransaction(mDB, true);\r\n        }\r\n        catch (err) {\r\n            throw new Error(`${msg} ${err}`);\r\n        }\r\n        for (const jView of jsonData.views) {\r\n            if (jView.value != null) {\r\n                // Create the view\r\n                try {\r\n                    results = this.jsonUtil.createView(mDB, jView);\r\n                    isView = true;\r\n                }\r\n                catch (err) {\r\n                    message = err;\r\n                    isView = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (isView) {\r\n            try {\r\n                this.sqliteUtil.commitTransaction(mDB, true);\r\n                return results.changes;\r\n            }\r\n            catch (err) {\r\n                throw new Error(`${msg} ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            if (message.length > 0) {\r\n                try {\r\n                    this.sqliteUtil.rollbackTransaction(mDB, true);\r\n                    throw new Error(`${msg} ${message}`);\r\n                }\r\n                catch (err) {\r\n                    throw new Error(`${msg} ${err}: ${message}`);\r\n                }\r\n            }\r\n            else {\r\n                // case were no views given\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.ImportFromJson = ImportFromJson;\r\n//# sourceMappingURL=importFromJson.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsSecret = void 0;\r\nconst GlobalSQLite_1 = require(\"../GlobalSQLite\");\r\nconst utilsFile_1 = require(\"./utilsFile\");\r\nconst utilsSQLite_1 = require(\"./utilsSQLite\");\r\nclass UtilsSecret {\r\n    constructor() {\r\n        this.globalUtil = new GlobalSQLite_1.GlobalSQLite();\r\n        this.sqliteUtil = new utilsSQLite_1.UtilsSQLite();\r\n        this.fileUtil = new utilsFile_1.UtilsFile();\r\n        this.storage = require('electron-json-storage');\r\n    }\r\n    isSecretStored() {\r\n        const secret = this.getPassphrase();\r\n        if (secret.length <= 0)\r\n            return false;\r\n        return true;\r\n    }\r\n    setEncryptSecret(passphrase) {\r\n        try {\r\n            let oldpassphrase = this.getPassphrase();\r\n            if (oldpassphrase.length > 0) {\r\n                throw new Error(`setEncryptSecret: passphrase already stored`);\r\n            }\r\n            else {\r\n                oldpassphrase = this.globalUtil != null ? this.globalUtil.secret : '';\r\n                if (oldpassphrase.length <= 0) {\r\n                    throw new Error(`setEncryptSecret: globalUtil is null`);\r\n                }\r\n                // check if some databases were encrypted with the initial secret 'sqlite secret'\r\n                this.changeDatabaseSecret(oldpassphrase, passphrase).then(() => {\r\n                    this.storage.set('userData', { passphrase: passphrase }, function (error) {\r\n                        if (error)\r\n                            throw new Error(`setEncryptSecret: ${error.message}`);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw new Error(`setEncryptSecret: ${err}`);\r\n        }\r\n    }\r\n    changeEncryptSecret(oldpassphrase, passphrase) {\r\n        try {\r\n            // check if some databases were encrypted with the oldpassphrase\r\n            this.changeDatabaseSecret(oldpassphrase, passphrase).then(() => {\r\n                this.setPassphrase(passphrase);\r\n            });\r\n        }\r\n        catch (err) {\r\n            throw new Error(`changeEncryptSecret: ${err}`);\r\n        }\r\n    }\r\n    clearEncryptSecret() {\r\n        try {\r\n            let oldpassphrase = this.getPassphrase();\r\n            if (oldpassphrase.length <= 0) {\r\n                oldpassphrase = this.globalUtil.secret;\r\n            }\r\n            // check if some databases were encrypted with the oldpassphrase\r\n            this.changeDatabaseSecret(oldpassphrase, '').then(() => {\r\n                this.removePassphrase();\r\n            });\r\n        }\r\n        catch (err) {\r\n            throw new Error(`clearEncryptSecret: ${err}`);\r\n        }\r\n    }\r\n    checkEncryptSecret(passphrase) {\r\n        const storedPassphrase = this.getPassphrase();\r\n        if (storedPassphrase.length <= 0) {\r\n            throw new Error(`checkEncryptSecret: No passphrase stored`);\r\n        }\r\n        if (storedPassphrase === passphrase) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    async changeDatabaseSecret(oldpassphrase, newpassphrase) {\r\n        try {\r\n            // get the database folder\r\n            const pathDatabase = this.fileUtil.getDatabasesPath();\r\n            // get the list of databases\r\n            const files = await this.fileUtil.getFileList(pathDatabase);\r\n            files.forEach(async (dbName) => {\r\n                const filePath = this.fileUtil.getFilePath(dbName);\r\n                const isEncrypt = await this.sqliteUtil.isDBEncrypted(filePath);\r\n                if (isEncrypt) {\r\n                    this.sqliteUtil.changePassword(filePath, oldpassphrase, newpassphrase);\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`changeDatabaseSecret: ${err}`);\r\n        }\r\n    }\r\n    getPassphrase() {\r\n        const data = this.storage.getSync('userData');\r\n        const keys = Object.keys(data);\r\n        if (data == null || keys.length <= 0)\r\n            return '';\r\n        if (Object.keys(data).includes('passphrase')) {\r\n            return data.passphrase;\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    setPassphrase(passphrase) {\r\n        const data = this.storage.getSync('userData');\r\n        data.passphrase = passphrase;\r\n        this.storage.set('userData', data, function (error) {\r\n            if (error)\r\n                throw new Error(`setPassphrase: ${error.message}`);\r\n        });\r\n    }\r\n    removePassphrase() {\r\n        const data = this.storage.getSync('userData');\r\n        delete data.passphrase;\r\n        this.storage.set('userData', data, function (error) {\r\n            if (error)\r\n                throw new Error(`removePassphrase: ${error.message}`);\r\n        });\r\n    }\r\n}\r\nexports.UtilsSecret = UtilsSecret;\r\n//# sourceMappingURL=utilsSecret.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsJsonEncryption = void 0;\r\nconst utilsSecret_1 = require(\"../utilsSecret\");\r\nclass UtilsJsonEncryption {\r\n    constructor() {\r\n        this.fileSecret = new utilsSecret_1.UtilsSecret();\r\n        this.SALT = 'jeep_capacitor_sqlite';\r\n        this.Crypto = require('crypto');\r\n        this.CryptoJS = require('crypto-js');\r\n    }\r\n    /**\r\n     * deriveKeyFromPassphrase\r\n     * Function to derive a symmetric key from passphrase and salt using PBKDF2\r\n     * @param passphrase\r\n     * @param salt\r\n     * @returns\r\n     */\r\n    deriveKeyFromPassphrase(passphrase, salt) {\r\n        const iterations = 10000; // Recommended number of iterations for PBKDF2\r\n        const keyLength = 32;\r\n        const key = this.Crypto.pbkdf2Sync(passphrase, salt, iterations, keyLength, 'sha256');\r\n        const keyHex = Buffer.from(key).toString('hex');\r\n        return keyHex;\r\n    }\r\n    /**\r\n     * encryptJSONObject\r\n     * Function to encrypt JSON object with AES and return as Base64\r\n     * @param jsonObj\r\n     * @returns\r\n     */\r\n    encryptJSONObject(jsonObj) {\r\n        const jsonString = JSON.stringify(jsonObj);\r\n        // get the passphrase\r\n        const passphrase = this.fileSecret.getPassphrase();\r\n        // derived a combined key from passphrase and salt\r\n        const key = this.deriveKeyFromPassphrase(passphrase, this.SALT);\r\n        const encrypted = this.CryptoJS.AES.encrypt(jsonString, key).toString();\r\n        const encryptedBase64 = Buffer.from(encrypted).toString('base64');\r\n        return encryptedBase64;\r\n    }\r\n    /**\r\n     * decryptJSONObject\r\n     * Function to decrypt AES encrypted JSON object from Base64\r\n     * @param encryptedBase64\r\n     * @returns\r\n     */\r\n    decryptJSONObject(encryptedBase64) {\r\n        const encryptedData = Buffer.from(encryptedBase64, 'base64').toString();\r\n        // get the passphrase\r\n        const passphrase = this.fileSecret.getPassphrase();\r\n        // derived a combined key from passphrase and salt\r\n        const key = this.deriveKeyFromPassphrase(passphrase, this.SALT);\r\n        const bytes = this.CryptoJS.AES.decrypt(encryptedData, key);\r\n        const decryptedString = bytes.toString(this.CryptoJS.enc.Utf8);\r\n        const decryptedObj = JSON.parse(decryptedString);\r\n        return decryptedObj;\r\n    }\r\n}\r\nexports.UtilsJsonEncryption = UtilsJsonEncryption;\r\n//# sourceMappingURL=utilsJsonEncryption.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsEncryption = void 0;\r\nconst utilsFile_1 = require(\"./utilsFile\");\r\nconst utilsSQLite_1 = require(\"./utilsSQLite\");\r\nclass UtilsEncryption {\r\n    constructor() {\r\n        this.fileUtil = new utilsFile_1.UtilsFile();\r\n        this.sqliteUtil = new utilsSQLite_1.UtilsSQLite();\r\n    }\r\n    /**\r\n     * EncryptDatabase\r\n     * @param pathDB\r\n     * @param password\r\n     */\r\n    async encryptDatabase(pathDB, password) {\r\n        const msg = 'EncryptDatabase: ';\r\n        const retB = this.fileUtil.isPathExists(pathDB);\r\n        if (retB) {\r\n            try {\r\n                const mDB = await this.sqliteUtil.openOrCreateDatabase(pathDB, '', false);\r\n                this.sqliteUtil.pragmaReKey(mDB, '', password);\r\n                this.sqliteUtil.closeDB(mDB);\r\n                return Promise.resolve();\r\n            }\r\n            catch (err) {\r\n                return Promise.reject(new Error(`${msg} ${err.message} `));\r\n            }\r\n        }\r\n        else {\r\n            return Promise.reject(new Error(`${msg}file path ${pathDB} ` + 'does not exist'));\r\n        }\r\n    }\r\n}\r\nexports.UtilsEncryption = UtilsEncryption;\r\n//# sourceMappingURL=utilsEncryption.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UtilsUpgrade = void 0;\r\nconst utilsSQLite_1 = require(\"./utilsSQLite\");\r\nclass UtilsUpgrade {\r\n    constructor() {\r\n        this.sqliteUtil = new utilsSQLite_1.UtilsSQLite();\r\n    }\r\n    /**\r\n     * OnUpgrade\r\n     * @param mDB\r\n     * @param vUpgDict\r\n     * @param dbName\r\n     * @param curVersion\r\n     * @param targetVersion\r\n     */\r\n    async onUpgrade(mDB, vUpgDict, curVersion, targetVersion) {\r\n        let changes;\r\n        const sortedKeys = new Int32Array(Object.keys(vUpgDict).map(item => parseInt(item))).sort();\r\n        for (const versionKey of sortedKeys) {\r\n            if (versionKey > curVersion && versionKey <= targetVersion) {\r\n                const statements = vUpgDict[versionKey].statements;\r\n                if (statements.length === 0) {\r\n                    return Promise.reject('onUpgrade: statements not given');\r\n                }\r\n                try {\r\n                    // set Foreign Keys Off\r\n                    await this.sqliteUtil.setForeignKeyConstraintsEnabled(mDB, false);\r\n                    const initChanges = await this.sqliteUtil.dbChanges(mDB);\r\n                    await this.executeStatementsProcess(mDB, statements);\r\n                    await this.sqliteUtil.setVersion(mDB, versionKey);\r\n                    // set Foreign Keys On\r\n                    await this.sqliteUtil.setForeignKeyConstraintsEnabled(mDB, true);\r\n                    changes = (await this.sqliteUtil.dbChanges(mDB)) - initChanges;\r\n                }\r\n                catch (err) {\r\n                    return Promise.reject(`onUpgrade: ${err}`);\r\n                }\r\n            }\r\n        }\r\n        return Promise.resolve(changes);\r\n    }\r\n    /**\r\n     * ExecuteStatementProcess\r\n     * @param mDB\r\n     * @param statements\r\n     */\r\n    async executeStatementsProcess(mDB, statements) {\r\n        try {\r\n            await this.sqliteUtil.beginTransaction(mDB, true);\r\n            for (const statement of statements) {\r\n                await this.sqliteUtil.execute(mDB, statement, false);\r\n            }\r\n            await this.sqliteUtil.commitTransaction(mDB, true);\r\n            return Promise.resolve();\r\n        }\r\n        catch (err) {\r\n            await this.sqliteUtil.rollbackTransaction(mDB, true);\r\n            return Promise.reject(`ExecuteStatementProcess: ${err}`);\r\n        }\r\n    }\r\n}\r\nexports.UtilsUpgrade = UtilsUpgrade;\r\n//# sourceMappingURL=utilsUpgrade.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Database = void 0;\r\nconst GlobalSQLite_1 = require(\"../GlobalSQLite\");\r\nconst exportToJson_1 = require(\"./ImportExportJson/exportToJson\");\r\nconst importFromJson_1 = require(\"./ImportExportJson/importFromJson\");\r\nconst utilsJson_1 = require(\"./ImportExportJson/utilsJson\");\r\nconst utilsJsonEncryption_1 = require(\"./ImportExportJson/utilsJsonEncryption\");\r\nconst utilsEncryption_1 = require(\"./utilsEncryption\");\r\nconst utilsFile_1 = require(\"./utilsFile\");\r\nconst utilsSQLite_1 = require(\"./utilsSQLite\");\r\nconst utilsSecret_1 = require(\"./utilsSecret\");\r\nconst utilsUpgrade_1 = require(\"./utilsUpgrade\");\r\nclass Database {\r\n    constructor(dbName, encrypted, mode, version, isEncryption, readonly, upgDict, globalUtil) {\r\n        this.jsonEncryptUtil = new utilsJsonEncryption_1.UtilsJsonEncryption();\r\n        this.fileUtil = new utilsFile_1.UtilsFile();\r\n        this.sqliteUtil = new utilsSQLite_1.UtilsSQLite();\r\n        this.jsonUtil = new utilsJson_1.UtilsJson();\r\n        this.globalUtil = new GlobalSQLite_1.GlobalSQLite();\r\n        this.encryptionUtil = new utilsEncryption_1.UtilsEncryption();\r\n        this.secretUtil = new utilsSecret_1.UtilsSecret();\r\n        this.upgradeUtil = new utilsUpgrade_1.UtilsUpgrade();\r\n        this.importFromJsonUtil = new importFromJson_1.ImportFromJson();\r\n        this.exportToJsonUtil = new exportToJson_1.ExportToJson();\r\n        this.upgradeVersionDict = {};\r\n        this.dbName = dbName;\r\n        this._encrypted = encrypted;\r\n        this._mode = mode;\r\n        this._isEncryption = isEncryption;\r\n        this.version = version;\r\n        this.readonly = readonly;\r\n        this.upgradeVersionDict = upgDict;\r\n        this.pathDB = this.fileUtil.getFilePath(dbName);\r\n        this._isDbOpen = false;\r\n        this.globalUtil = globalUtil ? globalUtil : new GlobalSQLite_1.GlobalSQLite();\r\n        if (this.pathDB.length === 0)\r\n            throw new Error('Could not generate a path to ' + dbName);\r\n        console.log(`&&& Databases path: ${this.pathDB}`);\r\n    }\r\n    /**\r\n     * IsDBOpen\r\n     * return the database status\r\n     * @param options: capSQLiteOptions\r\n     * @returns boolean\r\n     * @since 0.0.1\r\n     */\r\n    isDBOpen() {\r\n        return this._isDbOpen;\r\n    }\r\n    /**\r\n     * Open\r\n     * open the better-sqlite3 database\r\n     * @returns Promise<boolean>\r\n     */\r\n    async open() {\r\n        this._isDbOpen = false;\r\n        let password = '';\r\n        try {\r\n            if (this._encrypted &&\r\n                (this._mode === 'secret' || this._mode === 'encryption')) {\r\n                password = this.secretUtil.getPassphrase();\r\n                if (password.length <= 0) {\r\n                    password = this.globalUtil.secret;\r\n                }\r\n            }\r\n            if (this._mode === 'encryption') {\r\n                await this.encryptionUtil.encryptDatabase(this.pathDB, password);\r\n            }\r\n            this.database = this.sqliteUtil.openOrCreateDatabase(this.pathDB, password, this.readonly);\r\n            this._isDbOpen = true;\r\n            if (!this.readonly) {\r\n                const curVersion = this.sqliteUtil.getVersion(this.database);\r\n                if (this.version > curVersion &&\r\n                    Object.keys(this.upgradeVersionDict).length > 0) {\r\n                    try {\r\n                        await this.fileUtil.copyFileName(this.dbName, `backup-${this.dbName}`);\r\n                        // execute the upgrade flow process\r\n                        await this.upgradeUtil.onUpgrade(this.database, this.upgradeVersionDict, curVersion, this.version);\r\n                        // delete the backup database\r\n                        await this.fileUtil.deleteFileName(`backup-${this.dbName}`);\r\n                    }\r\n                    catch (err) {\r\n                        // restore the database from backup\r\n                        try {\r\n                            await this.fileUtil.restoreFileName(this.dbName, 'backup');\r\n                        }\r\n                        catch (err) {\r\n                            throw new Error(`Open: ${err}`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        catch (err) {\r\n            if (this._isDbOpen)\r\n                this.sqliteUtil.closeDB(this.database);\r\n            throw new Error(`Open: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * Close\r\n     * close better-sqlite3 database\r\n     * @returns Promise<boolean>\r\n     */\r\n    dbClose() {\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            this.sqliteUtil.closeDB(this.database);\r\n        }\r\n        catch (err) {\r\n            throw new Error(`Close failed: ${this.dbName}  ${err}`);\r\n        }\r\n        finally {\r\n            this._isDbOpen = false;\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * ChangeSecret\r\n     * open the @journeyapps/sqlcipher sqlite3 database\r\n     * @returns Promise<void>\r\n     */\r\n    async changeSecret() {\r\n        try {\r\n            if (this._mode === 'encryption') {\r\n                // change the password\r\n                const oPassword = this.globalUtil.secret;\r\n                const nPassword = this.globalUtil.newsecret;\r\n                this.sqliteUtil.changePassword(this.pathDB, oPassword, nPassword);\r\n            }\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`Change secret: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetVersion\r\n     * get the database version\r\n     * @returns Promise<number>\r\n     */\r\n    getVersion() {\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            const currentVersion = this.sqliteUtil.getVersion(this.database);\r\n            return currentVersion;\r\n        }\r\n        catch (err) {\r\n            if (this._isDbOpen)\r\n                this.sqliteUtil.closeDB(this.database);\r\n            throw new Error(`getVersion: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * DeleteDB\r\n     * delete a database\r\n     * @param dbName: string\r\n     * @returns Promise<boolean>\r\n     */\r\n    async deleteDB(dbName) {\r\n        // test if file exists\r\n        const isExists = this.fileUtil.isFileExists(dbName);\r\n        if (isExists && !this._isDbOpen) {\r\n            // open the database\r\n            try {\r\n                await this.open();\r\n            }\r\n            catch (err) {\r\n                throw new Error(`DeleteDB: ${err}`);\r\n            }\r\n        }\r\n        // close the database\r\n        try {\r\n            this.dbClose();\r\n        }\r\n        catch (err) {\r\n            throw new Error('DeleteDB: Close failed');\r\n        }\r\n        // delete the database\r\n        if (isExists) {\r\n            try {\r\n                await this.fileUtil.deleteFileName(dbName);\r\n            }\r\n            catch (err) {\r\n                throw new Error(`DeleteDB: deleteFile ${dbName} failed ${err}`);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * IsTableExists\r\n     * @param tableName\r\n     * @returns\r\n     */\r\n    isTableExists(tableName) {\r\n        this.ensureDatabaseIsOpen();\r\n        const isOpen = this._isDbOpen;\r\n        try {\r\n            const tableExistsResult = this.jsonUtil.isTableExists(this.database, isOpen, tableName);\r\n            return tableExistsResult;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`IsTableExists: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * CreateSyncTable\r\n     * create the synchronization table\r\n     * @returns Promise<number>\r\n     */\r\n    createSyncTable() {\r\n        this.ensureDatabaseIsOpen();\r\n        let changes = -1;\r\n        const isOpen = this._isDbOpen;\r\n        // check if the table has already being created\r\n        try {\r\n            const retB = this.jsonUtil.isTableExists(this.database, isOpen, 'sync_table');\r\n            if (!retB) {\r\n                const isLastModified = this.sqliteUtil.isLastModified(this.database, isOpen);\r\n                const isSqlDeleted = this.sqliteUtil.isSqlDeleted(this.database, isOpen);\r\n                if (isLastModified && isSqlDeleted) {\r\n                    const date = Math.round(new Date().getTime() / 1000);\r\n                    let stmts = `\r\n                          CREATE TABLE IF NOT EXISTS sync_table (\r\n                              id INTEGER PRIMARY KEY NOT NULL,\r\n                              sync_date INTEGER\r\n                              );`;\r\n                    stmts += `INSERT INTO sync_table (sync_date) VALUES (\r\n                              ${date});`;\r\n                    const results = this.sqliteUtil.execute(this.database, stmts, false);\r\n                    changes = results.changes;\r\n                    if (results.changes < 0) {\r\n                        throw new Error(`CreateSyncTable: failed changes < 0`);\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('No last_modified/sql_deleted columns in tables');\r\n                }\r\n            }\r\n            else {\r\n                changes = 0;\r\n            }\r\n            return changes;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`CreateSyncTable: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * SetSyncDate\r\n     * store the synchronization date\r\n     * @param syncDate: string\r\n     * @returns Promise<{result: boolean, message: string}>\r\n     */\r\n    setSyncDate(syncDate) {\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            const isTable = this.jsonUtil.isTableExists(this.database, this._isDbOpen, 'sync_table');\r\n            if (!isTable) {\r\n                throw new Error('No sync_table available');\r\n            }\r\n            const syncDateUnixTimestamp = Math.round(new Date(syncDate).getTime() / 1000);\r\n            let stmt = `UPDATE sync_table SET sync_date = `;\r\n            stmt += `${syncDateUnixTimestamp} WHERE id = 1;`;\r\n            const results = this.sqliteUtil.execute(this.database, stmt, false);\r\n            if (results.changes < 0) {\r\n                return { result: false, message: 'setSyncDate failed' };\r\n            }\r\n            else {\r\n                return { result: true };\r\n            }\r\n        }\r\n        catch (err) {\r\n            return { result: false, message: `setSyncDate failed: ${err}` };\r\n        }\r\n    }\r\n    /**\r\n     * GetSyncDate\r\n     * store the synchronization date\r\n     * @returns Promise<{syncDate: number, message: string}>\r\n     */\r\n    getSyncDate() {\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            const isTable = this.jsonUtil.isTableExists(this.database, this._isDbOpen, 'sync_table');\r\n            if (!isTable) {\r\n                throw new Error('No sync_table available');\r\n            }\r\n            const syncDate = this.exportToJsonUtil.getSyncDate(this.database);\r\n            if (syncDate > 0) {\r\n                return { syncDate };\r\n            }\r\n            else {\r\n                return { syncDate: 0, message: `setSyncDate failed` };\r\n            }\r\n        }\r\n        catch (err) {\r\n            return { syncDate: 0, message: `setSyncDate failed: ${err}` };\r\n        }\r\n    }\r\n    /**\r\n     * ExecuteSQL\r\n     * execute raw sql statements store in a string\r\n     * @param sql: string\r\n     * @returns Promise<number>\r\n     */\r\n    executeSQL(sql, transaction) {\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            if (transaction) {\r\n                const mode = this.sqliteUtil.getJournalMode(this.database);\r\n                console.log(`$$$ in executeSQL journal_mode: ${mode} $$$`);\r\n                this.sqliteUtil.beginTransaction(this.database, this._isDbOpen);\r\n            }\r\n            const results = this.sqliteUtil.execute(this.database, sql, false);\r\n            if (results.changes < 0) {\r\n                throw new Error('ExecuteSQL: changes < 0');\r\n            }\r\n            if (transaction) {\r\n                this.sqliteUtil.commitTransaction(this.database, this._isDbOpen);\r\n            }\r\n            return results.changes;\r\n        }\r\n        catch (executeError) {\r\n            let message = `${executeError}`;\r\n            try {\r\n                if (transaction) {\r\n                    this.sqliteUtil.rollbackTransaction(this.database, this._isDbOpen);\r\n                }\r\n            }\r\n            catch (rollbackErr) {\r\n                message += ` : ${rollbackErr}`;\r\n            }\r\n            throw new Error(`ExecuteSQL: ${message}`);\r\n        }\r\n    }\r\n    /**\r\n     * SelectSQL\r\n     * execute a sql query with/without binding values\r\n     * @param sql: string\r\n     * @param values: string[]\r\n     * @returns Promise<any[]>\r\n     */\r\n    selectSQL(sql, values) {\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            const selectResult = this.sqliteUtil.queryAll(this.database, sql, values);\r\n            return selectResult;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`SelectSQL: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * runSQL\r\n     * execute a raw sql statement with/without binding values\r\n     * @param sql: string\r\n     * @param values: string[]\r\n     * @returns Promise<{changes:number, lastId:number}>\r\n     */\r\n    runSQL(statement, values, transaction, returnMode) {\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            // start a transaction\r\n            if (transaction) {\r\n                const mode = this.sqliteUtil.getJournalMode(this.database);\r\n                console.log(`$$$ in runSQL journal_mode: ${mode} $$$`);\r\n                this.sqliteUtil.beginTransaction(this.database, this._isDbOpen);\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw new Error(`RunSQL: ${err}`);\r\n        }\r\n        try {\r\n            const results = this.sqliteUtil.prepareRun(this.database, statement, values, false, returnMode);\r\n            if (results.lastId < 0) {\r\n                if (transaction) {\r\n                    this.sqliteUtil.rollbackTransaction(this.database, this._isDbOpen);\r\n                }\r\n                throw new Error(`RunSQL: return LastId < 0`);\r\n            }\r\n            if (transaction) {\r\n                this.sqliteUtil.commitTransaction(this.database, this._isDbOpen);\r\n            }\r\n            return results;\r\n        }\r\n        catch (err) {\r\n            if (transaction) {\r\n                this.sqliteUtil.rollbackTransaction(this.database, this._isDbOpen);\r\n            }\r\n            throw new Error(`RunSQL: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * ExecSet\r\n     * execute a set of raw sql statements with/without binding values\r\n     * @param set: any[]\r\n     * @returns Promise<{changes:number, lastId:number}>\r\n     */\r\n    execSet(set, transaction, returnMode) {\r\n        this.ensureDatabaseIsOpen();\r\n        let results = { changes: 0, lastId: -1 };\r\n        try {\r\n            // start a transaction\r\n            if (transaction) {\r\n                const mode = this.sqliteUtil.getJournalMode(this.database);\r\n                console.log(`$$$ in execSet journal_mode: ${mode} $$$`);\r\n                this.sqliteUtil.beginTransaction(this.database, this._isDbOpen);\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw new Error(`ExecSet: ${err}`);\r\n        }\r\n        try {\r\n            results = this.sqliteUtil.executeSet(this.database, set, false, returnMode);\r\n            if (transaction) {\r\n                this.sqliteUtil.commitTransaction(this.database, this._isDbOpen);\r\n            }\r\n            return results;\r\n        }\r\n        catch (err) {\r\n            const message = err;\r\n            try {\r\n                if (transaction) {\r\n                    this.sqliteUtil.rollbackTransaction(this.database, this._isDbOpen);\r\n                }\r\n            }\r\n            catch (err) {\r\n                throw new Error(`ExecSet: ${message}: ` + `${err}`);\r\n            }\r\n        }\r\n    }\r\n    deleteExportedRows() {\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            this.exportToJsonUtil.delExportedRows(this.database);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`DeleteExportedRows: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * GetTableList\r\n     * get the table's list\r\n     * @returns\r\n     */\r\n    getTableList() {\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            const tableNames = this.sqliteUtil.getTablesNames(this.database);\r\n            return tableNames;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`GetTableList: ${err}`);\r\n        }\r\n    }\r\n    importJson(jsonData) {\r\n        let changes = 0;\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            // set Foreign Keys Off\r\n            this.sqliteUtil.setForeignKeyConstraintsEnabled(this.database, false);\r\n            if (jsonData.tables && jsonData.tables.length > 0) {\r\n                // create the database schema\r\n                changes = this.importFromJsonUtil.createDatabaseSchema(this.database, jsonData);\r\n                if (changes != -1) {\r\n                    // create the tables data\r\n                    changes += this.importFromJsonUtil.createTablesData(this.database, jsonData);\r\n                }\r\n            }\r\n            if (jsonData.views && jsonData.views.length > 0) {\r\n                // create the views\r\n                changes += this.importFromJsonUtil.createViews(this.database, jsonData);\r\n            }\r\n            // set Foreign Keys On\r\n            this.sqliteUtil.setForeignKeyConstraintsEnabled(this.database, true);\r\n            return changes;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`ImportJson: ${err}`);\r\n        }\r\n    }\r\n    exportJson(mode) {\r\n        const inJson = {};\r\n        inJson.database = this.dbName.slice(0, -9);\r\n        inJson.version = this.version;\r\n        inJson.encrypted = false;\r\n        inJson.mode = mode;\r\n        this.ensureDatabaseIsOpen();\r\n        try {\r\n            const isTable = this.jsonUtil.isTableExists(this.database, this._isDbOpen, 'sync_table');\r\n            if (isTable) {\r\n                this.exportToJsonUtil.setLastExportDate(this.database, new Date().toISOString());\r\n            }\r\n            let jsonResult = this.exportToJsonUtil.createExportObject(this.database, inJson);\r\n            const keys = Object.keys(jsonResult);\r\n            if (keys.length === 0) {\r\n                const msg = `ExportJson: return Object is empty ` + `No data to synchronize`;\r\n                throw new Error(msg);\r\n            }\r\n            let isValid = this.jsonUtil.isJsonSQLite(jsonResult);\r\n            if (this._encrypted && this._isEncryption) {\r\n                jsonResult.overwrite = true;\r\n                jsonResult.encrypted = true;\r\n                const base64Str = this.jsonEncryptUtil.encryptJSONObject(jsonResult);\r\n                jsonResult = {};\r\n                jsonResult.expData = base64Str;\r\n                isValid = true;\r\n            }\r\n            if (isValid) {\r\n                return jsonResult;\r\n            }\r\n            else {\r\n                throw new Error(`ExportJson: retJson not valid`);\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw new Error(`ExportJson: ${err}`);\r\n        }\r\n    }\r\n    /**\r\n     * Throws an error if `this._isDbOpen` is `false`.\r\n     */\r\n    ensureDatabaseIsOpen() {\r\n        if (!this._isDbOpen || !this.database) {\r\n            throw new Error(`getVersion: Database ${this.dbName} is not open yet. You should open it first.`);\r\n        }\r\n    }\r\n}\r\nexports.Database = Database;\r\n//# sourceMappingURL=Database.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CapacitorSQLite = void 0;\r\nconst GlobalSQLite_1 = require(\"./GlobalSQLite\");\r\nconst Database_1 = require(\"./electron-utils/Database\");\r\nconst utilsJson_1 = require(\"./electron-utils/ImportExportJson/utilsJson\");\r\nconst utilsJsonEncryption_1 = require(\"./electron-utils/ImportExportJson/utilsJsonEncryption\");\r\nconst utilsFile_1 = require(\"./electron-utils/utilsFile\");\r\nconst utilsSQLite_1 = require(\"./electron-utils/utilsSQLite\");\r\nconst utilsSecret_1 = require(\"./electron-utils/utilsSecret\");\r\nclass CapacitorSQLite {\r\n    constructor() {\r\n        this.versionUpgrades = {};\r\n        this.databases = {};\r\n        this.fileUtil = new utilsFile_1.UtilsFile();\r\n        this.sqliteUtil = new utilsSQLite_1.UtilsSQLite();\r\n        this.jsonUtil = new utilsJson_1.UtilsJson();\r\n        this.jsonEncryptUtil = new utilsJsonEncryption_1.UtilsJsonEncryption();\r\n        this.secretUtil = new utilsSecret_1.UtilsSecret();\r\n        this.globalUtil = new GlobalSQLite_1.GlobalSQLite();\r\n        this.isEncryption = this.fileUtil.getIsEncryption();\r\n    }\r\n    async createConnection(options) {\r\n        const optionKeys = Object.keys(options);\r\n        if (!optionKeys.includes('database')) {\r\n            throw new Error('Must provide a database name');\r\n        }\r\n        const dbName = options.database;\r\n        const version = options.version ? options.version : 1;\r\n        let encrypted = options.encrypted ? options.encrypted : false;\r\n        if (!this.isEncryption && encrypted) {\r\n            throw new Error('Must set electronIsEncryption = true in capacitor.config.ts');\r\n        }\r\n        let inMode = encrypted && options.mode === 'secret'\r\n            ? 'secret'\r\n            : encrypted && options.mode === 'encryption'\r\n                ? 'encryption'\r\n                : 'no-encryption';\r\n        if (!this.isEncryption) {\r\n            encrypted = false;\r\n            inMode = 'no-encryption';\r\n        }\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        let upgrades = {};\r\n        const versionUpgradeKeys = Object.keys(this.versionUpgrades);\r\n        if (versionUpgradeKeys.length !== 0 &&\r\n            versionUpgradeKeys.includes(dbName)) {\r\n            upgrades = this.versionUpgrades[dbName];\r\n        }\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const databaseConnection = new Database_1.Database(dbName + 'SQLite.db', encrypted, inMode, version, this.isEncryption, readonly, upgrades, this.globalUtil);\r\n        this.databases[connName] = databaseConnection;\r\n        return;\r\n    }\r\n    async closeConnection(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        try {\r\n            if (database.isDBOpen()) {\r\n                // close the database\r\n                database.dbClose();\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw new Error(`CloseConnection command failed:  close ${dbName} failed ${err.message}`);\r\n        }\r\n        finally {\r\n            // remove the connection from dictionary\r\n            delete this.databases[connName];\r\n        }\r\n        return;\r\n    }\r\n    async echo(options) {\r\n        const echoValue = this.getOptionValue(options, 'value');\r\n        const echoResult = {};\r\n        echoResult.value = echoValue;\r\n        return echoResult;\r\n    }\r\n    async open(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        try {\r\n            await database.open();\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`Open: ${err}`);\r\n        }\r\n    }\r\n    async close(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            try {\r\n                database.dbClose();\r\n                return;\r\n            }\r\n            catch (err) {\r\n                throw new Error(`Close: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`Close: ${msg}`);\r\n        }\r\n    }\r\n    async getVersion(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            try {\r\n                const version = await database.getVersion();\r\n                const versionResult = {};\r\n                versionResult.version = version;\r\n                return versionResult;\r\n            }\r\n            catch (err) {\r\n                throw new Error(`GetVersion: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`GetVersion: ${msg}`);\r\n        }\r\n    }\r\n    async getTableList(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            try {\r\n                const tableList = await database.getTableList();\r\n                const tableListResult = {};\r\n                tableListResult.values = tableList;\r\n                return tableListResult;\r\n            }\r\n            catch (err) {\r\n                throw new Error(`GetTableList: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`GetTableList: ${msg}`);\r\n        }\r\n    }\r\n    async execute(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const statements = this.getOptionValue(options, 'statements');\r\n        const transaction = this.getOptionValue(options, 'transaction', true);\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            if (readonly) {\r\n                const msg = 'not allowed in read-only mode ';\r\n                throw new Error(`Execute: ${msg}`);\r\n            }\r\n            try {\r\n                const executeResult = database.executeSQL(statements, transaction);\r\n                if (executeResult < 0) {\r\n                    throw new Error('Execute changes < 0');\r\n                }\r\n                else {\r\n                    return { changes: { changes: executeResult } };\r\n                }\r\n            }\r\n            catch (err) {\r\n                throw new Error(`Execute: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`Execute: ${msg}`);\r\n        }\r\n    }\r\n    async executeSet(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const setOfStatements = this.getOptionValue(options, 'set');\r\n        const transaction = this.getOptionValue(options, 'transaction', true);\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const returnMode = options.returnMode ? options.returnMode : 'no';\r\n        const connName = 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        for (const sStmt of setOfStatements) {\r\n            if (!('statement' in sStmt) || !('values' in sStmt)) {\r\n                throw new Error('ExecuteSet: Must provide a set as ' + 'Array of {statement,values}');\r\n            }\r\n        }\r\n        if (database.isDBOpen()) {\r\n            if (readonly) {\r\n                const msg = 'not allowed in read-only mode ';\r\n                throw new Error(`ExecuteSet failed: ${msg}`);\r\n            }\r\n            try {\r\n                const execSetResult = database.execSet(setOfStatements, transaction, returnMode);\r\n                if (execSetResult.lastId < 0) {\r\n                    throw new Error(`ExecuteSet failed changes <0`);\r\n                }\r\n                else {\r\n                    return { changes: execSetResult };\r\n                }\r\n            }\r\n            catch (err) {\r\n                throw new Error(`ExecuteSet failed: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`ExecuteSet failed: ${msg}`);\r\n        }\r\n    }\r\n    async run(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const statement = this.getOptionValue(options, 'statement');\r\n        const values = this.getOptionValue(options, 'values', []);\r\n        const transaction = this.getOptionValue(options, 'transaction', true);\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const returnMode = options.returnMode ? options.returnMode : 'no';\r\n        const connName = 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            if (readonly) {\r\n                const msg = 'not allowed in read-only mode ';\r\n                throw new Error(`Run failed: ${msg}`);\r\n            }\r\n            try {\r\n                const runResult = database.runSQL(statement, values, transaction, returnMode);\r\n                return { changes: runResult };\r\n            }\r\n            catch (err) {\r\n                throw new Error(`RUN failed: ${err} `);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`Run failed: ${msg}`);\r\n        }\r\n    }\r\n    async query(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const statement = this.getOptionValue(options, 'statement');\r\n        const values = this.getOptionValue(options, 'values', []);\r\n        if (statement.length === 0) {\r\n            throw new Error('Query: Statement may not be an empty string.');\r\n        }\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            try {\r\n                const queryResult = database.selectSQL(statement, values);\r\n                return { values: queryResult };\r\n            }\r\n            catch (err) {\r\n                try {\r\n                    if (err.message?.indexOf('QueryAll This statement does not return data. Use run() instead') !== -1) {\r\n                        const queryResult = database.runSQL(statement, values, false, 'no');\r\n                        return { values: queryResult.values };\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    throw new Error(`Query: ${error}`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`Query: ${msg}`);\r\n        }\r\n    }\r\n    async isDBExists(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        this.getDatabaseConnectionOrThrowError(connName);\r\n        //    if (database.isDBOpen()) {\r\n        const isExists = this.fileUtil.isFileExists(dbName + 'SQLite.db');\r\n        return { result: isExists };\r\n        //    } else {\r\n        //      const msg = `Database ${dbName} not opened`;\r\n        //     throw new Error(`isDBExists: ${msg}`);\r\n        //    }\r\n    }\r\n    async isDBOpen(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        const isOpen = database.isDBOpen();\r\n        return { result: isOpen };\r\n    }\r\n    async isDatabase(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const isExists = this.fileUtil.isFileExists(dbName + 'SQLite.db');\r\n        return { result: isExists };\r\n    }\r\n    async isTableExists(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const tableName = this.getOptionValue(options, 'table');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            try {\r\n                const isTableExistsResult = await database.isTableExists(tableName);\r\n                return { result: isTableExistsResult };\r\n            }\r\n            catch (err) {\r\n                throw new Error(`isTableExists: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`isTableExists: ${msg}`);\r\n        }\r\n    }\r\n    async deleteDatabase(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (readonly) {\r\n            const msg = 'not allowed in read-only mode ';\r\n            throw new Error(`DeleteDatabase failed: ${msg}`);\r\n        }\r\n        try {\r\n            await database.deleteDB(dbName + 'SQLite.db');\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`DeleteDatabase: ${err}`);\r\n        }\r\n    }\r\n    async isJsonValid(options) {\r\n        const jsonString = this.getOptionValue(options, 'jsonstring');\r\n        const jsonObj = JSON.parse(jsonString);\r\n        const isValid = this.jsonUtil.isJsonSQLite(jsonObj);\r\n        if (!isValid) {\r\n            throw new Error('Stringify Json Object not Valid');\r\n        }\r\n        else {\r\n            return { result: true };\r\n        }\r\n    }\r\n    async importFromJson(options) {\r\n        const jsonString = this.getOptionValue(options, 'jsonstring');\r\n        let jsonObj = JSON.parse(jsonString);\r\n        let inMode = 'no-encryption';\r\n        const key = 'expData';\r\n        if (key in jsonObj) {\r\n            // Decrypt the data\r\n            inMode = 'secret';\r\n            jsonObj = this.jsonEncryptUtil.decryptJSONObject(jsonObj.expData);\r\n        }\r\n        const isValid = this.jsonUtil.isJsonSQLite(jsonObj);\r\n        if (!isValid) {\r\n            throw new Error('Must provide a valid JsonSQLite Object');\r\n        }\r\n        const vJsonObj = jsonObj;\r\n        const dbName = `${vJsonObj.database}SQLite.db`;\r\n        const targetDbVersion = vJsonObj.version ?? 1;\r\n        const overwrite = vJsonObj.overwrite ?? false;\r\n        const encrypted = vJsonObj.encrypted ?? false;\r\n        const mode = vJsonObj.mode ?? 'full';\r\n        if (!this.isEncryption && encrypted) {\r\n            throw new Error('Must set electronIsEncryption = true in capacitor.config.ts');\r\n        }\r\n        // Create the database\r\n        const database = new Database_1.Database(dbName, encrypted, inMode, targetDbVersion, this.isEncryption, false, {}, this.globalUtil);\r\n        try {\r\n            if (overwrite && mode === 'full') {\r\n                const isExists = this.fileUtil.isFileExists(dbName);\r\n                if (isExists) {\r\n                    await this.fileUtil.deleteFileName(dbName);\r\n                }\r\n            }\r\n            // Open the database\r\n            await database.open();\r\n            const tableList = await database.getTableList();\r\n            if (mode === 'full' && tableList.length > 0) {\r\n                const currentVersion = await database.getVersion();\r\n                if (targetDbVersion < currentVersion) {\r\n                    throw new Error(`ImportFromJson: Cannot import a version lower than ${currentVersion}`);\r\n                }\r\n                if (currentVersion === targetDbVersion) {\r\n                    return { changes: { changes: 0 } };\r\n                }\r\n            }\r\n            // Import the JsonSQLite Object\r\n            const changes = await database.importJson(vJsonObj);\r\n            // Close the database\r\n            database.dbClose();\r\n            return { changes: { changes: changes } };\r\n        }\r\n        catch (err) {\r\n            throw new Error(`ImportFromJson: ${err}`);\r\n        }\r\n    }\r\n    async exportToJson(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const exportMode = this.getOptionValue(options, 'jsonexportmode');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            try {\r\n                const exportJsonResult = database.exportJson(exportMode);\r\n                const resultKeys = Object.keys(exportJsonResult);\r\n                if (resultKeys.includes('message')) {\r\n                    throw new Error(`exportToJson: ${exportJsonResult.message}`);\r\n                }\r\n                else {\r\n                    return { export: exportJsonResult };\r\n                }\r\n            }\r\n            catch (err) {\r\n                throw new Error(`ExportToJson: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`ExportToJson: ${msg}`);\r\n        }\r\n    }\r\n    async createSyncTable(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            if (readonly) {\r\n                const msg = 'not allowed in read-only mode ';\r\n                throw new Error(`CreateSyncTable failed: ${msg}`);\r\n            }\r\n            try {\r\n                const createTableSyncResult = await database.createSyncTable();\r\n                return {\r\n                    changes: { changes: createTableSyncResult },\r\n                };\r\n            }\r\n            catch (err) {\r\n                throw new Error(`CreateSyncTable: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`CreateSyncTable: ${msg}`);\r\n        }\r\n    }\r\n    async setSyncDate(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const syncDate = this.getOptionValue(options, 'syncdate');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            if (readonly) {\r\n                const msg = 'not allowed in read-only mode ';\r\n                throw new Error(`SetSyncDate failed: ${msg}`);\r\n            }\r\n            try {\r\n                await database.setSyncDate(syncDate);\r\n                return;\r\n            }\r\n            catch (err) {\r\n                throw new Error(`SetSyncDate: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`SetSyncDate: ${msg}`);\r\n        }\r\n    }\r\n    async getSyncDate(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = readonly ? 'RO_' + dbName : 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            try {\r\n                const ret = await database.getSyncDate();\r\n                return Promise.resolve(ret);\r\n            }\r\n            catch (err) {\r\n                throw new Error(`GetSyncDate: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`GetSyncDate: ${msg}`);\r\n        }\r\n    }\r\n    async deleteExportedRows(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const readonly = options.readonly ? options.readonly : false;\r\n        const connName = 'RW_' + dbName;\r\n        const database = this.getDatabaseConnectionOrThrowError(connName);\r\n        if (database.isDBOpen()) {\r\n            if (readonly) {\r\n                const msg = 'not allowed in read-only mode ';\r\n                throw new Error(`DeleteExportedRows: ${msg}`);\r\n            }\r\n            try {\r\n                await database.deleteExportedRows();\r\n                return Promise.resolve();\r\n            }\r\n            catch (err) {\r\n                throw new Error(`DeleteExportedRows: ${err}`);\r\n            }\r\n        }\r\n        else {\r\n            const msg = `Database ${dbName} not opened`;\r\n            throw new Error(`DeleteExportedRows: ${msg}`);\r\n        }\r\n    }\r\n    async addUpgradeStatement(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        const upgrades = this.getOptionValue(options, 'upgrade');\r\n        for (const upgrade of upgrades) {\r\n            const versionUpgradeKeys = Object.keys(upgrade);\r\n            if (!versionUpgradeKeys.includes('toVersion') ||\r\n                !versionUpgradeKeys.includes('statements')) {\r\n                throw new Error('Must provide an upgrade capSQLiteVersionUpgrade Object');\r\n            }\r\n            if (typeof upgrade.toVersion != 'number') {\r\n                throw new Error('upgrade.toVersion must be a number');\r\n            }\r\n            if (this.versionUpgrades[dbName]) {\r\n                this.versionUpgrades[dbName][upgrade.toVersion] = upgrade;\r\n            }\r\n            else {\r\n                const upgradeVersionDict = {};\r\n                upgradeVersionDict[upgrade.toVersion] = upgrade;\r\n                this.versionUpgrades[dbName] = upgradeVersionDict;\r\n            }\r\n        }\r\n        console.log(`this.versionUpgrades: ${JSON.stringify(this.versionUpgrades)}`);\r\n        return;\r\n    }\r\n    async copyFromAssets(options) {\r\n        const overwrite = this.getOptionValue(options, 'overwrite', false);\r\n        // check if the assets/database folder exists\r\n        const assetsDbPath = this.fileUtil.getAssetsDatabasesPath();\r\n        const pathExists = this.fileUtil.isPathExists(assetsDbPath);\r\n        if (pathExists) {\r\n            // get the database files\r\n            const dbList = await this.fileUtil.getFileList(assetsDbPath);\r\n            // loop through the database files\r\n            dbList.forEach(async (db) => {\r\n                if (this.fileUtil.getExtName(db) === '.db') {\r\n                    // for each copy the file to the Application database folder\r\n                    await this.fileUtil.copyFromAssetToDatabase(db, overwrite);\r\n                }\r\n                if (this.fileUtil.getExtName(db) === '.zip') {\r\n                    const assetPath = this.fileUtil.getAssetsDatabasesPath();\r\n                    await this.fileUtil.unzipDatabase(db, assetPath, overwrite);\r\n                }\r\n            });\r\n            return;\r\n        }\r\n        else {\r\n            throw new Error(`CopyFromAssets: assets/databases folder does not exist:[${assetsDbPath}]`);\r\n        }\r\n    }\r\n    async getFromHTTPRequest(options) {\r\n        const url = this.getOptionValue(options, 'url', '');\r\n        const overwrite = this.getOptionValue(options, 'overwrite', false);\r\n        if (url.length === 0) {\r\n            throw new Error(`getFromHTTPRequest: You must give a database url`);\r\n        }\r\n        const cachePath = this.fileUtil.getCachePath();\r\n        await this.fileUtil.downloadFileFromHTTP(url, cachePath);\r\n        if (this.fileUtil.getExtName(url) === '.zip') {\r\n            const zipName = `${this.fileUtil.getBaseName(url)}.zip`;\r\n            await this.fileUtil.unzipDatabase(zipName, cachePath, overwrite);\r\n        }\r\n        if (overwrite) {\r\n            await this.fileUtil.moveDatabaseFromCache();\r\n        }\r\n        else {\r\n            throw new Error(`getFromHTTPRequest: cannot move file from cache overwrite: ${overwrite}`);\r\n        }\r\n    }\r\n    async getDatabaseList() {\r\n        // get the database folder\r\n        const pathDatabase = this.fileUtil.getDatabasesPath();\r\n        // get the list of databases\r\n        const files = await this.fileUtil.getFileList(pathDatabase);\r\n        if (files.length > 0) {\r\n            return { values: files };\r\n        }\r\n        else {\r\n            throw new Error(`isTableExists: No databases found in [${pathDatabase}]`);\r\n        }\r\n    }\r\n    async checkConnectionsConsistency(options) {\r\n        const dbNames = this.getOptionValue(options, 'dbNames');\r\n        const openModes = this.getOptionValue(options, 'openModes');\r\n        const checkConsistencyResult = {};\r\n        checkConsistencyResult.result = false;\r\n        const dbConns = [];\r\n        dbNames.forEach((value, i) => {\r\n            dbConns.push(`${openModes[i]}_${value}`);\r\n        });\r\n        try {\r\n            let inConnectionsSet = new Set(Object.keys(this.databases));\r\n            const outConnectionSet = new Set(dbConns);\r\n            if (outConnectionSet.size === 0) {\r\n                await this.resetDbDict(Object.keys(this.databases));\r\n                return Promise.resolve(checkConsistencyResult);\r\n            }\r\n            if (inConnectionsSet.size < outConnectionSet.size) {\r\n                await this.resetDbDict(Object.keys(this.databases));\r\n                return Promise.resolve(checkConsistencyResult);\r\n            }\r\n            if (inConnectionsSet.size > outConnectionSet.size) {\r\n                for (const key of inConnectionsSet) {\r\n                    if (!Array.from(outConnectionSet.keys()).includes(key)) {\r\n                        const opt = {};\r\n                        let readonly = false;\r\n                        if (key.substring(0, 3) === 'RO_') {\r\n                            readonly = true;\r\n                        }\r\n                        opt.database = key.substring(3);\r\n                        opt.readonly = readonly;\r\n                        await this.closeConnection(opt);\r\n                    }\r\n                }\r\n            }\r\n            inConnectionsSet = new Set(Object.keys(this.databases));\r\n            if (inConnectionsSet.size === outConnectionSet.size) {\r\n                const symmetricDifferenceSet = await this.symmetricDifference(inConnectionsSet, outConnectionSet);\r\n                if (symmetricDifferenceSet.size === 0) {\r\n                    checkConsistencyResult.result = true;\r\n                    return checkConsistencyResult;\r\n                }\r\n                else {\r\n                    await this.resetDbDict(Object.keys(this.databases));\r\n                    return checkConsistencyResult;\r\n                }\r\n            }\r\n            else {\r\n                await this.resetDbDict(Object.keys(this.databases));\r\n                return checkConsistencyResult;\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw new Error(`CheckConnectionsConsistency: ${err}`);\r\n        }\r\n    }\r\n    async isSecretStored() {\r\n        if (!this.isEncryption) {\r\n            throw new Error(`isSecretStored: Not available electronIsEncryption = false in capacitor.config.ts`);\r\n        }\r\n        try {\r\n            const isStored = this.secretUtil.isSecretStored();\r\n            return { result: isStored };\r\n        }\r\n        catch (err) {\r\n            throw new Error(`isSecretStored: ${err}`);\r\n        }\r\n    }\r\n    async setEncryptionSecret(options) {\r\n        const isEncrypt = this.fileUtil.getIsEncryption();\r\n        if (!isEncrypt) {\r\n            throw new Error(`setEncryptionSecret: Not available electronIsEncryption = false in capacitor.config.ts`);\r\n        }\r\n        const passphrase = options.passphrase ? options.passphrase : '';\r\n        if (passphrase.length <= 0) {\r\n            throw new Error(`setEncryptionSecret: You must give a passphrase`);\r\n        }\r\n        try {\r\n            // check if already exists\r\n            const isStored = this.secretUtil.isSecretStored();\r\n            if (isStored) {\r\n                throw new Error(`setEncryptionSecret: passphrase already in store`);\r\n            }\r\n            await this.closeAllConnections();\r\n            this.secretUtil.setEncryptSecret(passphrase);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`setEncryptionSecret: ${err}`);\r\n        }\r\n    }\r\n    async changeEncryptionSecret(options) {\r\n        const isEncrypt = this.fileUtil.getIsEncryption();\r\n        if (!isEncrypt) {\r\n            throw new Error(`changeEncryptionSecret: Not available electronIsEncryption = false in capacitor.config.ts`);\r\n        }\r\n        const oldsecret = this.secretUtil.getPassphrase();\r\n        const oldpassphrase = options.oldpassphrase ? options.oldpassphrase : '';\r\n        if (oldpassphrase.length <= 0) {\r\n            throw new Error(`changeEncryptionSecret: You must give the oldpassphrase`);\r\n        }\r\n        if (oldpassphrase !== oldsecret) {\r\n            throw new Error(`changeEncryptionSecret: the given oldpassphrase is wrong`);\r\n        }\r\n        const passphrase = options.passphrase ? options.passphrase : '';\r\n        if (passphrase.length <= 0) {\r\n            throw new Error(`changetEncryptionSecret: You must give a passphrase`);\r\n        }\r\n        try {\r\n            await this.closeAllConnections();\r\n            this.secretUtil.changeEncryptSecret(oldpassphrase, passphrase);\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`changetEncryptionSecret: ${err}`);\r\n        }\r\n    }\r\n    async clearEncryptionSecret() {\r\n        const isEncrypt = this.fileUtil.getIsEncryption();\r\n        if (!isEncrypt) {\r\n            throw new Error(`clearEncryptionSecret: Not available electronIsEncryption = false in capacitor.config.ts`);\r\n        }\r\n        if (this.globalUtil == null) {\r\n            throw new Error(`clearEncryptionSecret: No available globalUtil`);\r\n        }\r\n        try {\r\n            await this.closeAllConnections();\r\n            this.secretUtil.clearEncryptSecret();\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`clearEncryptionSecret: ${err}`);\r\n        }\r\n    }\r\n    async isInConfigEncryption() {\r\n        return Promise.resolve({ result: this.isEncryption });\r\n    }\r\n    async isDatabaseEncrypted(options) {\r\n        const dbName = this.getOptionValue(options, 'database');\r\n        try {\r\n            const isEncrypt = await this.sqliteUtil.isDatabaseEncrypted(dbName + 'SQLite.db');\r\n            return { result: isEncrypt };\r\n        }\r\n        catch (err) {\r\n            throw new Error(`isDatabaseEncrypted: ${err}`);\r\n        }\r\n    }\r\n    async checkEncryptionSecret(options) {\r\n        const isEncrypt = this.fileUtil.getIsEncryption();\r\n        if (!isEncrypt) {\r\n            throw new Error(`checkEncryptionSecret: Not available electronIsEncryption = false in capacitor.config.ts`);\r\n        }\r\n        const passphrase = options.passphrase ? options.passphrase : '';\r\n        if (passphrase.length <= 0) {\r\n            throw new Error(`checkEncryptionSecret: You must give a passphrase`);\r\n        }\r\n        try {\r\n            await this.closeAllConnections();\r\n            const isSame = this.secretUtil.checkEncryptSecret(passphrase);\r\n            return { result: isSame };\r\n        }\r\n        catch (err) {\r\n            throw new Error(`checkEncryptionSecret: ${err}`);\r\n        }\r\n    }\r\n    ////////////////////////////////\r\n    //// PRIVATE METHODS\r\n    ////////////////////////////////\r\n    async resetDbDict(keys) {\r\n        try {\r\n            for (const key of keys) {\r\n                const opt = {};\r\n                let readonly = false;\r\n                if (key.substring(0, 3) === 'RO_') {\r\n                    readonly = true;\r\n                }\r\n                opt.database = key.substring(3);\r\n                opt.readonly = readonly;\r\n                await this.closeConnection(opt);\r\n            }\r\n        }\r\n        catch (err) {\r\n            throw new Error(`ResetDbDict: ${err}`);\r\n        }\r\n    }\r\n    async symmetricDifference(setA, setB) {\r\n        const difference = new Set(setA);\r\n        for (const elem of setB) {\r\n            if (difference.has(elem)) {\r\n                difference.delete(elem);\r\n            }\r\n            else {\r\n                difference.add(elem);\r\n            }\r\n        }\r\n        return difference;\r\n    }\r\n    /**\r\n     * Returns a database connection, if it already exists.\r\n     * If the conneciton does not exist yet, it throws an error.\r\n     *\r\n     * @param dbName\r\n     * @returns\r\n     */\r\n    getDatabaseConnectionOrThrowError(dbName) {\r\n        const databaseNames = Object.keys(this.databases);\r\n        if (!databaseNames.includes(dbName)) {\r\n            throw new Error(`No connection available for database \"${dbName}\"`);\r\n        }\r\n        return this.databases[dbName];\r\n    }\r\n    /**\r\n     * Gets the value of an option from the options object.\r\n     * If the `optionKey` does not exist and there is no `defaultValue` defined, an exception is thrown.\r\n     * If the `optionKey` does not exist but there is a `defaultValue`, the `defaultValue` is returned.\r\n     *\r\n     * @param options\r\n     * @param optionKey\r\n     * @param defaultValue\r\n     * @returns\r\n     */\r\n    getOptionValue(options, optionKey, defaultValue = undefined) {\r\n        const optionKeys = Object.keys(options);\r\n        if (!optionKeys.includes(optionKey)) {\r\n            if (defaultValue === undefined) {\r\n                throw new Error(`Must provide \"${optionKey}\" in options.`);\r\n            }\r\n            else {\r\n                return defaultValue;\r\n            }\r\n        }\r\n        return options[optionKey];\r\n    }\r\n    async closeAllConnections() {\r\n        const databaseNames = Object.keys(this.databases);\r\n        try {\r\n            for (const name of databaseNames) {\r\n                const db = this.databases[name];\r\n                if (db.isDBOpen()) {\r\n                    db.dbClose();\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        catch (err) {\r\n            throw new Error(`CloseAllConnection command failed: ${err.message}`);\r\n        }\r\n    }\r\n    ////////////////////////////////\r\n    //// UNIMPLEMENTED METHODS\r\n    ////////////////////////////////\r\n    async getMigratableDbList(options) {\r\n        console.log('getCordovaDbList', options);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async addSQLiteSuffix(options) {\r\n        console.log(`${JSON.stringify(options)}`);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async deleteOldDatabases(options) {\r\n        console.log(`${JSON.stringify(options)}`);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async moveDatabasesAndAddSuffix(options) {\r\n        console.log(`${JSON.stringify(options)}`);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async getUrl() {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async initWebStore() {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async saveToStore(options) {\r\n        console.log(`${JSON.stringify(options)}`);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async saveToLocalDisk(options) {\r\n        console.log(`${JSON.stringify(options)}`);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async getFromLocalDiskToStore(options) {\r\n        console.log(`${JSON.stringify(options)}`);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async getNCDatabasePath(options) {\r\n        console.log('getNCDatabasePath', options);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async createNCConnection(options) {\r\n        console.log('createNCConnection', options);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async closeNCConnection(options) {\r\n        console.log('closeNCConnection', options);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async isNCDatabase(options) {\r\n        console.log('isNCDatabase', options);\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    async isInConfigBiometricAuth() {\r\n        throw new Error('Not implemented on web.');\r\n    }\r\n}\r\nexports.CapacitorSQLite = CapacitorSQLite;\r\n//# sourceMappingURL=index.js.map"],"names":["GlobalSQLite_1","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","utilsFile_1","utilsSQLite_1","utilsJson_1","utilsSecret_1","Database_1","utilsJsonEncryption_1","require$$7","require$$8","require$$9","CapacitorSQLite_1"],"mappings":"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"}